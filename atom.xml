<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ENJOYHOT</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://enjoyhot.github.io/"/>
  <updated>2017-04-02T09:32:28.800Z</updated>
  <id>http://enjoyhot.github.io/</id>
  
  <author>
    <name>enjoyhot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础篇</title>
    <link href="http://enjoyhot.github.io/2017/04/02/Java%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://enjoyhot.github.io/2017/04/02/Java基础篇/</id>
    <published>2017-04-02T08:03:51.000Z</published>
    <updated>2017-04-02T09:32:28.800Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;本系列文章将分为三部分：&quot;&gt;&lt;a href=&quot;#本系列文章将分为三部分：&quot; class=&quot;headerlink&quot; title=&quot;本系列文章将分为三部分：&quot;&gt;&lt;/a&gt;本系列文章将分为三部分：&lt;/h2&gt;&lt;h3 id=&quot;Java基础篇&quot;&gt;&lt;a href=&quot;#Java基础篇&quot; class=&quot;headerlink&quot; title=&quot;Java基础篇&quot;&gt;&lt;/a&gt;Java基础篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法篇&lt;/li&gt;
&lt;li&gt;数据结构篇&lt;/li&gt;
&lt;li&gt;集合框架&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Java高级篇&quot;&gt;&lt;a href=&quot;#Java高级篇&quot; class=&quot;headerlink&quot; title=&quot;Java高级篇&quot;&gt;&lt;/a&gt;Java高级篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JVM知识&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;Java安全&lt;/li&gt;
&lt;li&gt;设计模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Java实践篇&quot;&gt;&lt;a href=&quot;#Java实践篇&quot; class=&quot;headerlink&quot; title=&quot;Java实践篇&quot;&gt;&lt;/a&gt;Java实践篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;并发编程相关&lt;/li&gt;
&lt;li&gt;分布式相关&lt;/li&gt;
&lt;li&gt;框架介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;有些【疑问】可能会留在笔记中，在学习中补充…&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javase 1.8 online doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javase 1.7 online doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javase 1.8 JVM Specification online doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javase 1.7 JVM Specification online doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;语法章&quot;&gt;&lt;a href=&quot;#语法章&quot; class=&quot;headerlink&quot; title=&quot;语法章&quot;&gt;&lt;/a&gt;语法章&lt;/h1&gt;&lt;h2 id=&quot;手动编译Java工程&quot;&gt;&lt;a href=&quot;#手动编译Java工程&quot; class=&quot;headerlink&quot; title=&quot;手动编译Java工程&quot;&gt;&lt;/a&gt;手动编译Java工程&lt;/h2&gt;&lt;p&gt;目前的代码打包工具很多，前有ant，后有Maven, Gradle, SBT, Ivy, Grape…，手动编译运行，是怎样的。这里简单举个例子，假如文件组织如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;src/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classes/&lt;ul&gt;
&lt;li&gt;a.java&lt;/li&gt;
&lt;li&gt;b.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;test/&lt;ul&gt;
&lt;li&gt;main.java(import classes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译java文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;javac a.java b.java main.java&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;无顺序之分&lt;/li&gt;
&lt;li&gt;生成的class文件在原目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;br&gt;进入src目录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// -cp: 等价于-classpath，多个则用分号；分开，也可带上jar包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java -cp . test.main&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，当需要对工程进行编译，则需要先编译好，在打包时，为了能带上环境变量，往往把包路径移至import的那一层，然后打成war包或jar包等。&lt;/p&gt;
&lt;h2 id=&quot;数组常用操作&quot;&gt;&lt;a href=&quot;#数组常用操作&quot; class=&quot;headerlink&quot; title=&quot;数组常用操作&quot;&gt;&lt;/a&gt;数组常用操作&lt;/h2&gt;&lt;h3 id=&quot;填充&quot;&gt;&lt;a href=&quot;#填充&quot; class=&quot;headerlink&quot; title=&quot;填充&quot;&gt;&lt;/a&gt;填充&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; test[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; testDeep[][] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 仅限一维&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Arrays.fill(test, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打印&quot;&gt;&lt;a href=&quot;#打印&quot; class=&quot;headerlink&quot; title=&quot;打印&quot;&gt;&lt;/a&gt;打印&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [8, 8, 8, 8]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(Arrays.toString(test));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(Arrays.deepToString(testDeep));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;拷贝&quot;&gt;&lt;a href=&quot;#拷贝&quot; class=&quot;headerlink&quot; title=&quot;拷贝&quot;&gt;&lt;/a&gt;拷贝&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; test_copy[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[test.length];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.arraycopy(test, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, test_copy, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, test.length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [8, 8, 8, 8]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(Arrays.toString(test_copy));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] test_copy_v2 = Arrays.copyOf(test, test.length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [9, 8, 8, 8]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(Arrays.toString(test_copy_v2));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;效率&lt;br&gt;System.arraycopy &amp;gt; Arrays.copyOf(本质上新建了数组，并调用了前者) &amp;gt; for循环赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类中的普通方法可以和类名同名，和构造方法唯一的区分是，构造方法没有返回值；&lt;/li&gt;
&lt;li&gt;抽象类可以有构造方法，接口中不能有构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;类的继承&quot;&gt;&lt;a href=&quot;#类的继承&quot; class=&quot;headerlink&quot; title=&quot;类的继承&quot;&gt;&lt;/a&gt;类的继承&lt;/h2&gt;&lt;h3 id=&quot;方法的重写-override-，两同两小一大原则：&quot;&gt;&lt;a href=&quot;#方法的重写-override-，两同两小一大原则：&quot; class=&quot;headerlink&quot; title=&quot;方法的重写(override)，两同两小一大原则：&quot;&gt;&lt;/a&gt;方法的重写(override)，两同两小一大原则：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法名相同，参数类型相同&lt;/li&gt;
&lt;li&gt;子类返回类型小于等于父类方法返回类型，&lt;/li&gt;
&lt;li&gt;子类抛出异常小于等于父类方法抛出异常，&lt;/li&gt;
&lt;li&gt;子类访问权限大于等于父类方法访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;程序中代码的加载顺序&quot;&gt;&lt;a href=&quot;#程序中代码的加载顺序&quot; class=&quot;headerlink&quot; title=&quot;程序中代码的加载顺序&quot;&gt;&lt;/a&gt;程序中代码的加载顺序&lt;/h3&gt;&lt;p&gt;假设在主函数中new一个子类构造函数，执行顺序为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;父类Ｂ静态代码块-&amp;gt;子类Ａ静态代码块-&amp;gt;父类Ｂ非静态代码块-&amp;gt;父类Ｂ构造函数-&amp;gt;子类Ａ非静态代码块-&amp;gt;子类Ａ构造函数。&lt;/li&gt;
&lt;li&gt;静态代码块和静态变量的加载看书写顺序；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;原因：&lt;/strong&gt;涉及类加载过程中初始化顺序，详看【高级篇】&lt;/p&gt;
&lt;h3 id=&quot;静态类&quot;&gt;&lt;a href=&quot;#静态类&quot; class=&quot;headerlink&quot; title=&quot;静态类&quot;&gt;&lt;/a&gt;静态类&lt;/h3&gt;&lt;p&gt;静态类只能是内部类，可以被继承&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterfaceTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sun&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterfaceTest&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Sun&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;继承需要注意的&quot;&gt;&lt;a href=&quot;#继承需要注意的&quot; class=&quot;headerlink&quot; title=&quot;继承需要注意的&quot;&gt;&lt;/a&gt;继承需要注意的&lt;/h3&gt;&lt;p&gt;子类定义了父类没有的方法，而用父类指向子类对象，不能直接调用子类方法，需要强制转换：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(SON)base.methodB();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;父类构造函数调用自己的方法，若子类继承其方法，则运行时调用的是子类的方法，如下输出为null，纵使Sub是静态内部类：&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String baseName = &lt;span class=&quot;string&quot;&gt;&quot;base&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        callName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;callName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(baseName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String baseName = &lt;span class=&quot;string&quot;&gt;&quot;sub&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;callName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println (baseName) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Base b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;包访问权限&quot;&gt;&lt;a href=&quot;#包访问权限&quot; class=&quot;headerlink&quot; title=&quot;包访问权限&quot;&gt;&lt;/a&gt;包访问权限&lt;/h2&gt;&lt;p&gt;类似C++中的friendly，不过还是有人吐槽，包访问权限就是个鸡肋的存在。主要有几个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于其它包类，该成员为private；&lt;/li&gt;
&lt;li&gt;继承者与被继承者都处于同一个包才能访问包访问权限成员；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;接口与抽象类&quot;&gt;&lt;a href=&quot;#接口与抽象类&quot; class=&quot;headerlink&quot; title=&quot;接口与抽象类&quot;&gt;&lt;/a&gt;接口与抽象类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;抽象类的修饰符可以为public或abstract&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下合法，public和abstract都可以&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterfaceTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部接口修饰符还可以protected,private&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TT&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;KL&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;teset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口可以继承接口，不可以继承类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 接口可以继承接口，不可以继承类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CallableStatement&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreparedStatement&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口的成员特点：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Inteface1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String name = &lt;span class=&quot;string&quot;&gt;&quot;enjoyhot&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enjoyhot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Inteface1&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// enjoyhot&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(Inteface1.name);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成员变量: 只能是常量。默认自动添加(也只能是)修饰符&lt;br&gt;&lt;strong&gt;public static final&lt;/strong&gt;&lt;br&gt;成员方法: 只能是抽象方法。默认自动添加(也只能是)修饰符&lt;br&gt;&lt;strong&gt;public abstract&lt;/strong&gt;&lt;br&gt;内部类：自动地(也只能是)修饰符&lt;br&gt;&lt;strong&gt;public static&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可声明为public，然后在外部调用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;父.子 test = 父.new 子();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部类操作可直接引用外部类域(包括private),内部类可以直接访问外部类属性，包括private修饰的属性，可通过类似MyOuterClass.this的操作来获得外部类的引用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;内部类是一种编译器现象，JVM毫不知情；值得注意的是，当内部类调用外部类的私有域时候，编译器将产生一个static方法，该方法具有包访问权限，因此就提供给黑客一个修改私有域方法的切入点:-D；&lt;/li&gt;
&lt;li&gt;在内部类不需要访问外部类对象时，应使用静态内部类，这样该内部类就不能随意访问外部非static域，达到安全的目的，否则如上点，自动转为static方法；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;局部类&quot;&gt;&lt;a href=&quot;#局部类&quot; class=&quot;headerlink&quot; title=&quot;局部类&quot;&gt;&lt;/a&gt;局部类&lt;/h2&gt;&lt;h3 id=&quot;例子-1&quot;&gt;&lt;a href=&quot;#例子-1&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LocalClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AA&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//块内局部类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LocalClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AA&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//构造器内局部类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;localClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AA&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//方法内局部类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//编译后，形成诸如：外部类名称+$+同名顺序+局部类名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//LocalClass$1AA.class  LocalClass$2AA.class  LocalClass$3AA.class  LocalClass.class&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;局部类的修饰符一定是包权限；&lt;/li&gt;
&lt;li&gt;此时不能访问外部类域，访问外部调用的参数需要声明为final，编译后该final局部变量为该内部类的final实值域；&lt;ul&gt;
&lt;li&gt;原因：假如只是外部传递过来的普通变量，调用外部方法后，这个变量将因返回而释放内存消失，这时就会出现内部类引用非法。而用final修饰后，编译器会在内部类中生成一个外部变量的拷贝。&lt;/li&gt;
&lt;li&gt;总结而言，封闭的作用域引用了外部变量必须定义为final，在做spark的MapReduce操作时经常会遇到。网上一个应用例子如图所示：&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201103/15/0_1300176759Dsv5.gif&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自动拆箱装箱&quot;&gt;&lt;a href=&quot;#自动拆箱装箱&quot; class=&quot;headerlink&quot; title=&quot;自动拆箱装箱&quot;&gt;&lt;/a&gt;自动拆箱装箱&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;自动装箱和拆箱从Java1.5开始引入，将int的变量转换成Integer对象，这个过程叫做装箱，反之将Integer对象转换成int类型值，这个过程叫做拆箱。装箱和拆箱是自动进行的非人为转换，所以就称作为自动装箱和拆箱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;byte&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;short&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;char&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;int&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;long&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;float&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;double&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;boolean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Byte&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Short&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Character&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Integer&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Long&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Float&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Double&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;举例说明&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Integer i01=&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i02=&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Integer i03=Integer.valueOf(&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 地址比较，1字节内才使用常量池，所以范围(-128~127)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Integer i04=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 自动拆装箱，对i03不拆装箱&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;i01和i02相比将自动拆装箱，数值相比; // 那究竟是拆还是装【疑问】&lt;/li&gt;
&lt;li&gt;i01和i03比的是地址（在编译前定义的数值一般会从常量获取，除了valueOf操作需要值的范围-128~127（1字节）才是从常量中获取，为什么【疑问】），i01和i03都是编译之前定义的，所以是常量池中的同一个对象;&lt;/li&gt;
&lt;li&gt;i03和i04比较的是地址，因为i04是编译之后又new出来的对象，所以它的地址必然不在常量池中，所以i03==i04的结果为false。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Iterator-vs-Iterable&quot;&gt;&lt;a href=&quot;#Iterator-vs-Iterable&quot; class=&quot;headerlink&quot; title=&quot;Iterator vs Iterable&quot;&gt;&lt;/a&gt;Iterator vs Iterable&lt;/h2&gt;&lt;p&gt;Iterable：&lt;a href=&quot;https://github.com/enjoyhot/jdk-online/blob/master/1.8/java/lang/Iterable.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jdk1.8源码&lt;/a&gt;&lt;br&gt;Iterator：&lt;a href=&quot;https://github.com/enjoyhot/jdk-online/blob/master/1.8/java/util/Iterator.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jdk1.8源码&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二者都是接口，foreach操作可用于任何实现Iterable接口的类对象，集合Collection、List、Set都是Iterable的实现类，所以他们及其他们的子类都可以使用for循环增强进行迭代；&lt;/li&gt;
&lt;li&gt;通过源码可看到，Iterable调用Iterator()方法将返回一个Iterator对象。而实现了Iterator接口的对象在不同方法间进行传递的时候，由于当前迭代位置不可知，所以next()的结果也不可知。除非再为Iterator接口添加一个reset()方法，用来重置当前迭代位置。&lt;/li&gt;
&lt;li&gt;实现Iterable接口的对象则不然：&lt;br&gt;func(A){&lt;br&gt;A.Iterator()&lt;br&gt;}&lt;br&gt;每次调用都返回一个从头开始的迭代器，各个迭代器之间互不影响。&lt;/li&gt;
&lt;li&gt;在jdk1.8中可看到，Iterable多了两个default具体方法&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 为了Lambda操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * items.forEach(k -&amp;gt; System.out.println(&quot;Item:&quot;+k));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Consumer&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Objects.requireNonNull(action);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (T t : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        action.accept(t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Spliterator(splitable iterator可分割迭代器)接口是Java为了并行遍历数据源中的元素而设计的迭代器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Spliterator&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;spliterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Spliterators.spliteratorUnknownSize(iterator(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Object&quot;&gt;&lt;a href=&quot;#Object&quot; class=&quot;headerlink&quot; title=&quot;Object&quot;&gt;&lt;/a&gt;Object&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JDK7中所有方法&lt;br&gt;clone,equals,finalize,getClass,notify,notifyAll,hashCode,toString,wait&lt;/li&gt;
&lt;li&gt;基本类型不是扩展于Object类，而数组类型[]是;&lt;/li&gt;
&lt;li&gt;Objects.equals(a,b)可以防止一方为null的情况，使用a.equals(b)前提是&lt;strong&gt;a!=null&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;一般而言，继承Object重写equals需重写hashCode()方法，这是一种常规协定；（参考Java核心技术卷I第9版, 5.2.3）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IntHolder&quot;&gt;&lt;a href=&quot;#IntHolder&quot; class=&quot;headerlink&quot; title=&quot;IntHolder&quot;&gt;&lt;/a&gt;IntHolder&lt;/h2&gt;&lt;p&gt;Integer与int一样，在方法参数中属于按值传递，而Integer对象不可变，因此包装器内容不会变。假如想编写一个修改数据值参数的方法就需要使用持有者类型。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        IntHolder a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntHolder(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        change(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(a.value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IntHolder a)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a.value = a.value * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符串常量&quot;&gt;&lt;a href=&quot;#字符串常量&quot; class=&quot;headerlink&quot; title=&quot;字符串常量&quot;&gt;&lt;/a&gt;字符串常量&lt;/h2&gt;&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;对Java中的一个变量引用一个字符串时，可能创建对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果”ABC”这个字符串在java String池里不存在，会在java String池创建这个一个String对象；&lt;/li&gt;
&lt;li&gt;如果存在，变量直接引用这个String池里的对象，因为String是final的，可以共用。&lt;/li&gt;
&lt;li&gt;举个说明&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String a = &lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String b = &lt;span class=&quot;string&quot;&gt;&quot;AB&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String c = b+&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String d = &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;BC&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String e = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(a==c); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(a==d); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(e==d); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a和b都是字符串常量，所以在编译期就被确定了，c中有个b是引用不是字符串常量所以不会在编译期确定，因此前者false后者true;&lt;/li&gt;
&lt;li&gt;e会在java heap先创建一个String对象，如果”ABC”这个字符串在java String池里不存在，则在String池中再新建一个【疑问】&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;String-intern&quot;&gt;&lt;a href=&quot;#String-intern&quot; class=&quot;headerlink&quot; title=&quot;String.intern()&quot;&gt;&lt;/a&gt;String.intern()&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;String.intern()方法是native方法，用来检测在String pool是否已经有这个String存在,java1.7介绍道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.&lt;br&gt;　　It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.&lt;br&gt;　　All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.&lt;br&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;br&gt;　　a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参考美团技术团队一篇文章&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/in_depth_understanding_string_intern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.meituan.com/in_depth_understanding_string_intern.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA 使用 jni 调用c++实现的StringTable的intern方法,StringTable的intern方法跟Java中的HashMap的实现是差不多的, 只是不能自动扩容。默认大小是1009，如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用String.intern时性能会大幅下降，&lt;strong&gt;可参考本文HashMap介绍&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;intern()的实现&lt;br&gt;&lt;strong&gt;&lt;em&gt;JDK1.6和JDK1.7实现不同，为了避免干扰，我们主要关心1.7以后的&lt;/em&gt;&lt;/strong&gt;。jdk7的版本中，字符串常量池从Perm区移到正常的Java Heap区域了，jdk8直接取消了Perm区，详情参考&lt;strong&gt;Java高级篇&lt;/strong&gt;；下面通过例子说明一下。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//生成了2个对象，常量池中的“1” 和JAVA Heap中的字符串对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s.intern(); &lt;span class=&quot;comment&quot;&gt;//s对象去常量池中寻找后发现 “1” 已经在常量池里了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s2 = &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//生成一个s2的引用指向常量池中的“1”对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(s == s2); &lt;span class=&quot;comment&quot;&gt;// false,Object和引用相比，不相等&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//生成字符串常量池中的“1”和JAVA Heap中的s3引用指向的对象StringObj(其实还有两个匿名对象，不过已经失去引用)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//此时s3引用对象内容是&quot;11&quot;，但此时常量池中是没有 “11”对象的。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;) + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s3.intern(); &lt;span class=&quot;comment&quot;&gt;//将s3中的“11”字符串放入String常量池中,现在s3间接指向了“11”&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下图应该有误，经过intern之后，jdk7能使s3直接指向常量池，不经过StringObj&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s4 = &lt;span class=&quot;string&quot;&gt;&quot;11&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//创建的时候发现已经有这个对象了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(s3 == s4); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160823155446893&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;h2 id=&quot;final的常见使用场景&quot;&gt;&lt;a href=&quot;#final的常见使用场景&quot; class=&quot;headerlink&quot; title=&quot;final的常见使用场景&quot;&gt;&lt;/a&gt;final的常见使用场景&lt;/h2&gt;&lt;h3 id=&quot;final-class&quot;&gt;&lt;a href=&quot;#final-class&quot; class=&quot;headerlink&quot; title=&quot;final class&quot;&gt;&lt;/a&gt;final class&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;阻止被继承，其中方法将自动转为final，域不会自动转；&lt;/li&gt;
&lt;li&gt;不能修饰接口，抽象类，原因显而易见，二者都是需要“继承”来发挥作用；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-method&quot;&gt;&lt;a href=&quot;#final-method&quot; class=&quot;headerlink&quot; title=&quot;final method&quot;&gt;&lt;/a&gt;final method&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;阻止继承之后的重写，不允许子类插手一些重要的处理，因此该方法就“失去虚拟特征”，意义：&lt;blockquote&gt;
&lt;p&gt;没有动态绑定 ——&amp;gt; 编译器优化为内联函数 ——&amp;gt; 例如(e.getName转为e.name)&lt;br&gt;拓展：虚拟机中的即时编译器处理能力不断增强，如果方法很简短，被频繁调用且没有真正地被覆盖(如经常调用父类的方法)，则即时编译器就会将这个方法进行内联处理。而如果子类这里被JVM加载进来，覆盖了内联方法，优化器将取消内联，这个过程很慢，但很少发生，所以即时编译器还是很高效的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-variable&quot;&gt;&lt;a href=&quot;#final-variable&quot; class=&quot;headerlink&quot; title=&quot;final variable&quot;&gt;&lt;/a&gt;final variable&lt;/h3&gt;&lt;p&gt;final变量的值只能在构造函数中赋值或初始化时定好。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String test1 = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test1 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String test2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// accepted&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test2 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Java中的编码&quot;&gt;&lt;a href=&quot;#Java中的编码&quot; class=&quot;headerlink&quot; title=&quot;Java中的编码&quot;&gt;&lt;/a&gt;Java中的编码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java一律采用Unicode编码方式，每个字符无论中文还是英文字符都占用2个字节；&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; han = &lt;span class=&quot;string&quot;&gt;&#39;永&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.format(&lt;span class=&quot;string&quot;&gt;&quot;%x&quot;&lt;/span&gt;,(&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt;)han);&lt;span class=&quot;comment&quot;&gt;//对第二个参数（短整型）格式化为十六进制输出，0x开头&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出6c38&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; han1 = &lt;span class=&quot;number&quot;&gt;0x6c38&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(han1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出永&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GBK–&amp;gt;UTF-8&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dst = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; string (src,&lt;span class=&quot;string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;).getbytes(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dst = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(src.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;),&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;面向对象的五大基本原则&quot;&gt;&lt;a href=&quot;#面向对象的五大基本原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象的五大基本原则&quot;&gt;&lt;/a&gt;面向对象的五大基本原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单一职责原则（SRP）&lt;/li&gt;
&lt;li&gt;开放封闭原则（OCP）&lt;/li&gt;
&lt;li&gt;里氏替换原则（LSP）&lt;/li&gt;
&lt;li&gt;依赖倒置原则（DIP）&lt;/li&gt;
&lt;li&gt;接口隔离原则（ISP）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基本数据类型的转换问题&quot;&gt;&lt;a href=&quot;#基本数据类型的转换问题&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型的转换问题&quot;&gt;&lt;/a&gt;基本数据类型的转换问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例1&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;；&lt;span class=&quot;comment&quot;&gt;// 00000000 10000000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; b = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) a; &lt;span class=&quot;comment&quot;&gt;// b = -128(后8位)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例2&lt;br&gt;10原码： 0000000000000000,0000000000001010；&lt;br&gt;-10补码：1111111111111111,1111111111110110（取反再+1）&lt;br&gt;因此 ~10 =&lt;br&gt;1111111111111111,1111111111110101，减1再取反后31位得-11&lt;br&gt;所以 ~10 = -11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例3&lt;br&gt;==号，低精度自动转为高精度比较，如long与float，会自动转为float，+-*/亦然。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;低———————————————&amp;gt;高&lt;br&gt;byte,short,char-&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;switch&lt;br&gt;参数是只能放int类型，但是放byte，short，char类型的也可以，是因为byte，short，shar可以自动提升（自动类型转换）为int,也不能boolean类型,任何类型不能转换为boolean类型型，强转也不行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;h3 id=&quot;类型类&quot;&gt;&lt;a href=&quot;#类型类&quot; class=&quot;headerlink&quot; title=&quot;类型类&quot;&gt;&lt;/a&gt;类型类&lt;/h3&gt;&lt;p&gt;Object类中包含一个方法名叫getClass，利用这个方法就可以获得一个实例的类型类。类型类指的是代表一个类型的类，因为一切皆是对象，类型也不例外，在Java使用类型类来表示一个类型。所有的类型类都是Class类的实例。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;A a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; A();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// print equal&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a.getClass()==A.class)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;equal&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;unequal&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取对象方法&quot;&gt;&lt;a href=&quot;#获取对象方法&quot; class=&quot;headerlink&quot; title=&quot;获取对象方法&quot;&gt;&lt;/a&gt;获取对象方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;public Method[] getDeclaredMethods()&lt;br&gt;返回类或接口声明的所有方法，包括public, protected, default (package) 访问和private方法的Method对象，但不包括继承的方法。当然也包括它所实现接口的方法。&lt;/li&gt;
&lt;li&gt;public Method[] getMethods()&lt;br&gt;返回某个类的所有public方法，包括其继承类的公用方法，当然也包括它所实现接口的方法。&lt;/li&gt;
&lt;li&gt;对于private方法的反射调用，会抛出IllegalAccessException，因此访问的话，需绕过安全管理器的控制：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReflectPrivate&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PrivateClass p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PrivateClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class&amp;lt;?&amp;gt; classType = p.getClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 获取Method对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method method = classType.getDeclaredMethod(&lt;span class=&quot;string&quot;&gt;&quot;sayHello&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class[] &amp;#123; String.class &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        method.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String str = (String) method.invoke(p, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object[] &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;enjoyhot&quot;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrivateClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello: &quot;&lt;/span&gt; + name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;native方法&quot;&gt;&lt;a href=&quot;#native方法&quot; class=&quot;headerlink&quot; title=&quot;native方法&quot;&gt;&lt;/a&gt;native方法&lt;/h2&gt;&lt;p&gt;native方法是由另外一种语言（如c/c++，FORTRAN，汇编）实现的本地方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public final static native int w();  // 合法&lt;/li&gt;
&lt;li&gt;abstract方法不能用native来修饰，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;泛型擦除&quot;&gt;&lt;a href=&quot;#泛型擦除&quot; class=&quot;headerlink&quot; title=&quot;泛型擦除&quot;&gt;&lt;/a&gt;泛型擦除&lt;/h2&gt;&lt;p&gt;泛型可以说是Java中最常用的语法糖之一，因此虚拟机不支持这些语法，在编译时转化为Object，继承的时候利用桥方法动态调用，据此应考虑泛型在开发过程中的约束和局限性。一个较典型的局限性和约束是，java不支持泛型数组：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// compile error&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt;[] ls = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// without compile error&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt;[] ls = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;?&amp;gt;[] ls = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一种编译器检测出来直接报错，第二种逃过编译器的检测，设计者必须心理有数。&lt;br&gt;不支持泛型数组的原因是，ls对象将编译为Object[]，再对该变量进行各种赋值操作都将逃过编译器的捕捉，假如编译器不小心指定错了类型，例如：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; ——&amp;gt; List&amp;lt;String&amp;gt;[]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在运行时才会报ClassCastException。&lt;/p&gt;
&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;throwable(接口)&lt;ul&gt;
&lt;li&gt;Error (unchecked)&lt;/li&gt;
&lt;li&gt;Exception&lt;ul&gt;
&lt;li&gt;RuntimeException (unchecked)&lt;/li&gt;
&lt;li&gt;IOException (checked)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般而言，对于知道怎么处理的异常需要catch(A|B e),不知道的继续向上传递，通过在函数头尾部显式throws A,B；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;断言&quot;&gt;&lt;a href=&quot;#断言&quot; class=&quot;headerlink&quot; title=&quot;断言&quot;&gt;&lt;/a&gt;断言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;assert一般用于开发/测试中，当代码发布时，这些插入的检测语句将自动地移走，即类加载器将跳过断言代码；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;补充&quot;&gt;&lt;a href=&quot;#补充&quot; class=&quot;headerlink&quot; title=&quot;补充&quot;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自加运算&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0 + 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s=(i++)+(++i);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于finally&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = f_test();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(k);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f_test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;It is in final chunk.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// It is in final chunk.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果将 return a; 注释掉，将输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// It is in final chunk.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据结构章&quot;&gt;&lt;a href=&quot;#数据结构章&quot; class=&quot;headerlink&quot; title=&quot;数据结构章&quot;&gt;&lt;/a&gt;数据结构章&lt;/h1&gt;&lt;h2 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;For jdk1.7 &amp;amp; 1.8&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;继承关系&quot;&gt;&lt;a href=&quot;#继承关系&quot; class=&quot;headerlink&quot; title=&quot;继承关系&quot;&gt;&lt;/a&gt;继承关系&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;RandomAccess&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Cloneable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;几种构造函数&quot;&gt;&lt;a href=&quot;#几种构造函数&quot; class=&quot;headerlink&quot; title=&quot;几种构造函数&quot;&gt;&lt;/a&gt;几种构造函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ArrayList()&lt;/strong&gt;&lt;br&gt;Constructs an empty list with an initial capacity of ten.&lt;br&gt;&lt;strong&gt;ArrayList(Collection&amp;lt;? extends E&amp;gt; c)&lt;/strong&gt;&lt;br&gt;Constructs a list containing the elements of the specified collection, in the order they are returned by the collection’s iterator.&lt;br&gt;&lt;strong&gt;ArrayList(int initialCapacity)&lt;/strong&gt;&lt;br&gt;Constructs an empty list with the specified initial capacity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;用法要点&quot;&gt;&lt;a href=&quot;#用法要点&quot; class=&quot;headerlink&quot; title=&quot;用法要点&quot;&gt;&lt;/a&gt;用法要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ArrayList的底层是由一个Object[]数组构成的，Object[]数组，默认的长度是10 。当调用size时，计算的是逻辑长度，即“空元素不被计算”。&lt;/li&gt;
&lt;li&gt;java自动增加ArrayList大小的思路是:&lt;ul&gt;
&lt;li&gt;向ArrayList添加对象时，原对象数目加1;&lt;/li&gt;
&lt;li&gt;如果大于原底层数组长度，则以适当长度(50%+1)新建一个原数组的拷贝，并修改原数组，指向这个新建数组;&lt;/li&gt;
&lt;li&gt;原数组自动抛弃（java垃圾回收机制会自动回收）;&lt;/li&gt;
&lt;li&gt;size则在向数组添加对象后，自增1；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ArrayList扩容通过ensureCapacity判断后可扩容50%+1，Vector是默认扩展1倍。&lt;/li&gt;
&lt;li&gt;ArrayList()构造一个空列表，在添加第一个元素时，会自动扩展。而对于new ArrayList(20)则没有进行扩容行为;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.importnew.com/9928.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;importnew：关于ArrayList的5道面试题&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;同步方法&quot;&gt;&lt;a href=&quot;#同步方法&quot; class=&quot;headerlink&quot; title=&quot;同步方法&quot;&gt;&lt;/a&gt;同步方法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List list = Collections.synchronizedList(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(...));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CopyOnWriteArrayList&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CopyOnWriteArrayList&quot;&gt;&lt;a href=&quot;#CopyOnWriteArrayList&quot; class=&quot;headerlink&quot; title=&quot;CopyOnWriteArrayList&quot;&gt;&lt;/a&gt;CopyOnWriteArrayList&lt;/h2&gt;&lt;p&gt;顾名思义，写时复制，写数组时，先复制一份出来，然后向新的容器里添加元素，可以做到安全地进行并发读，因为写的时候有加锁（源码）并且不改变旧内存，通过读写分离实现安全的优点，适合使用在读操作远远大于写操作的场景（与volatile类似），如缓存。&lt;/p&gt;
&lt;h3 id=&quot;缺点：&quot;&gt;&lt;a href=&quot;#缺点：&quot; class=&quot;headerlink&quot; title=&quot;缺点：&quot;&gt;&lt;/a&gt;缺点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内存占用问题&lt;br&gt;进行写操作时（如add），内存中驻留两个对象内存，可能造成频繁的GC；&lt;/li&gt;
&lt;li&gt;数据一致性问题&lt;br&gt;只能保证数据的最终一致性，不能保证实时一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;h3 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h3&gt;&lt;p&gt;　　在jdk1.7中，是数组（单位称为桶）与链表（jdk1.8中改为基于红黑树的实现）的结合体。&lt;br&gt;　　链表的基本元素Entry，内部类有key,value,hash和next四个字段，其中next也是一个Entry类型。&lt;/p&gt;
&lt;h3 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;默认的负载因子大小为0.75，当一个map填满了75%的bucket时候，将会创建原来HashMap大小的2倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。拓展，为什么HashMap初始化的大小需要2的指数次幂：&lt;a href=&quot;http://stackoverflow.com/questions/8352378/why-does-hashmap-require-that-the-initial-capacity-be-a-power-of-two&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;再查找哈希表的内在位置时[0,length-1]有个如下的操作，从而确定h所在的位置（笔者认为觉得这是寻找桶时候的类似开放定址法的实现），这样相比不是2^n-1的全111……求余而言，需要自己去实现求余，会比较高效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h &amp;amp; (length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。&lt;ul&gt;
&lt;li&gt;当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，然后找到bucket位置来储存值对象。&lt;/li&gt;
&lt;li&gt;当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HashMap-vs-HashTable&quot;&gt;&lt;a href=&quot;#HashMap-vs-HashTable&quot; class=&quot;headerlink&quot; title=&quot;HashMap vs HashTable&quot;&gt;&lt;/a&gt;HashMap vs HashTable&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hashtable是线程安全的，通过synchronized保证线程安全，并且是安全失败的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java快速失败与安全失败迭代器 :&lt;br&gt;java迭代器提供了遍历集合对象的功能，集合返回的迭代器有快速失败型的也有安全失败型的，快速失败迭代器在迭代时如果集合类被修改，立即抛出ConcurrentModificationException异常，而安全失败迭代器不会抛出异常，因为它是在集合类的克隆对象上操作的。ArrayList，Vector，HashMap等集合返回的迭代器都是快速失败类型的。而对于Hashtable而言：&lt;blockquote&gt;
&lt;p&gt;the iterator in Hashtable is fail-fast but the enumerator is not fail-safe. 参考：&lt;a href=&quot;http://stackoverflow.com/questions/16205443/concurrency-in-hashtables-and-fail-safe-behavior&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值，而且用与代替求模，如上&lt;strong&gt;操作&lt;/strong&gt;中代码所示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HashTable中hash数组默认大小是11，增加的方式是 old*2+1。HashMap数组table的长度length大小必须为2的n次方，而size默认大小是16，size和扩容后一定是原来2的指数，默认是2倍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HashMap可以接受null键值和值，而Hashtable则不能；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HashMap-vs-ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#HashMap-vs-ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap vs ConcurrentHashMap&quot;&gt;&lt;/a&gt;HashMap vs ConcurrentHashMap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap允许多个修改操作并发进行，是线程安全的；&lt;/li&gt;
&lt;li&gt;HashMap在每个链表节点中储存键值对对象（Entry对象）。链表中next不是final，所以支持往后插入。然而，HashMap在多线程情况下rehash可能出现环形链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://my.oschina.net/xianggao/blog/393990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashMap多线程并发问题分析&lt;/a&gt;&lt;br&gt;参考：&lt;a href=&quot;http://www.importnew.com/7099.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于HashMap的经典面试题&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap&quot;&gt;&lt;/a&gt;ConcurrentHashMap&lt;/h2&gt;&lt;h3 id=&quot;段数量&quot;&gt;&lt;a href=&quot;#段数量&quot; class=&quot;headerlink&quot; title=&quot;段数量&quot;&gt;&lt;/a&gt;段数量&lt;/h3&gt;&lt;p&gt;默认有16个，最大个数为1 &amp;lt;&amp;lt; 16= 65536&lt;/p&gt;
&lt;h3 id=&quot;实现线程安全&quot;&gt;&lt;a href=&quot;#实现线程安全&quot; class=&quot;headerlink&quot; title=&quot;实现线程安全&quot;&gt;&lt;/a&gt;实现线程安全&lt;/h3&gt;&lt;p&gt;HashTable是一个线程安全的类，它使用synchronized来锁住整张Hash表来实现线程安全，即每次锁住整张表让线程独占，线程竞争激烈的情况下HashTable的效率非常低下。而对于ConcurrentHashMap：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了&lt;strong&gt;锁分离技术&lt;/strong&gt;。它使用了多个锁来控制对hash表的不同部分进行的修改。&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的Hashtable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。只有对全局需要改变时锁定的是所有的segment，如size()。&lt;/li&gt;
&lt;li&gt;对于一个key，需要经过三次hash操作（哪个段，哪个桶，链表哪一位），才能最终定位这个元素的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基本实现图如下【jdk1.7】&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/image005.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在散列时如果产生“碰撞”，将采用“分离链接法”来处理“碰撞”：把“碰撞”的 HashEntry 对象链接成一个链表。由于 HashEntry 的 next 域为 final 型，所以新节点只能在链表的表头处插入。&lt;br&gt;参考：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConcurrentHashMap高并发性的实现机制&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ConcurrentHashMap1.6使用的是Segement（继承自ReentrantLock）分段锁的技术来保证同步的，使用synchronized关键字保证线程安全的是HashTable。1.8之后ConcurrentHashMap改变了实现方式，将原来的Segment用单向链表来替代，put的时候对目标链表的头节点加锁，而这时用的就是synchronized。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ConcurrentHashMap1.6使用的是Segement（继承自ReentrantLock）分段锁的技术来保证同步的，使用synchronized关键字保证线程安全的是HashTable。1.8之后ConcurrentHashMap改变了实现方式，将原来的Segment(table)用单向链表来替代，put的时候对目标链表的头节点加锁，而这时用的也是synchronized。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;效率：System.arraycopy &amp;gt; System.copyOf(本质上新建了数组，并调用了前者) &amp;gt; for循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;集合框架篇&quot;&gt;&lt;a href=&quot;#集合框架篇&quot; class=&quot;headerlink&quot; title=&quot;集合框架篇&quot;&gt;&lt;/a&gt;集合框架篇&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;安全的集合：&lt;/strong&gt; ArrayList，Vector，HashMap等集合返回的迭代器都是快速失败类型的。通过抛出ConCurrenceModificationException的异常保证安全。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/916361/201603/916361-20160322135512683-168468369.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;h2 id=&quot;常用对象分类&quot;&gt;&lt;a href=&quot;#常用对象分类&quot; class=&quot;headerlink&quot; title=&quot;常用对象分类&quot;&gt;&lt;/a&gt;常用对象分类&lt;/h2&gt;&lt;h3 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List&lt;ul&gt;
&lt;li&gt;LinkedList&lt;br&gt;  内在为链表实现，插入，删除效率高于ArrayList&lt;/li&gt;
&lt;li&gt;ArrayList&lt;br&gt;  底层为数组实现，每次扩容都需要把整个数据复制&lt;/li&gt;
&lt;li&gt;Vector (安全，但已经很少使用了)&lt;ul&gt;
&lt;li&gt;Stack (安全)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set&lt;ul&gt;
&lt;li&gt;TreeSet&lt;br&gt;  插入时按照红黑树排序，速率相比普通Set会慢一些，时间复杂度为log2N&lt;/li&gt;
&lt;li&gt;HashSet&lt;br&gt;  set的常用对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queue&lt;ul&gt;
&lt;li&gt;PriorityQueue（大数据量求TopK操作）&lt;ul&gt;
&lt;li&gt;迭代器非按照元素的排列顺序排列，但remove时是按照优先级数最小的元素进行取出，即优先级最高的元素。&lt;/li&gt;
&lt;li&gt;优先级队列中的元素可以按照任意的顺序插入，却总是按照升序的顺序进行检索。无论何时调用remove方法，总会获得当前优先级队列中的最小元素，但并不是对所有元素都排序。它是采用了堆（一个可以自我调整的二叉树），执行增加删除操作后，可以让最小元素移动到根。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用普通同步容器(Vector, Hashtable)的迭代器,也需要外部锁来保证其原子性。因为普通同步容器产生的迭代器是非线程安全的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HashMap&lt;br&gt;  分离链接法，next不是final,因此往后插入。&lt;/li&gt;
&lt;li&gt;TreeMap&lt;br&gt;  实现了SortedMap接口，默认保证按照键的升序排列的映射表&lt;/li&gt;
&lt;li&gt;WeakHashMap&lt;br&gt;  参考&lt;a href=&quot;http://www.cnblogs.com/Skyar/p/5962253.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Skyar/p/5962253.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hashtable (安全)&lt;br&gt;  HashTable中hash数组默认大小是11，增加的方式是 old*2+1，保证奇数。分离链接法、开放定址法。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;本系列文章将分为三部分：&quot;&gt;&lt;a href=&quot;#本系列文章将分为三部分：&quot; class=&quot;headerlink&quot; title=&quot;本系列文章将分为三部分：&quot;&gt;&lt;/a&gt;本系列文章将分为三部分：&lt;/h2&gt;&lt;h3 id=&quot;Java基础篇&quot;&gt;&lt;a href=&quot;#Java基础篇&quot; class=&quot;headerlink&quot; title=&quot;Java基础篇&quot;&gt;&lt;/a&gt;Java基础篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法篇&lt;/li&gt;
&lt;li&gt;数据结构篇&lt;/li&gt;
&lt;li&gt;集合框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://enjoyhot.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://enjoyhot.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>或明</title>
    <link href="http://enjoyhot.github.io/2016/08/01/or-know/"/>
    <id>http://enjoyhot.github.io/2016/08/01/or-know/</id>
    <published>2016-08-01T13:23:50.000Z</published>
    <updated>2017-04-02T09:32:28.884Z</updated>
    
    <content type="html">&lt;p&gt;时值8月，离毕业更近了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在入学时就开始算计留在学校还有多少时间，毕竟，在学校的日子将会一去不复返，总得做些有意义的事情，弥补一些遗憾或空缺。&lt;/p&gt;
&lt;p&gt;依托客观存在的24小时，寻找忙碌的理由，为未来打算，是多年来的行事法则。希望每天过得充实而又收获，但往往做到一半（呵呵），这又是另外一种境遇。有个计划，遵守计划，能完成78成，就很成功。&lt;/p&gt;
&lt;p&gt;懂得舍弃，生活不乏单调，或许，光明只有一步之遥。附上最近脑海里浮现的歌。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=33248189&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;时值8月，离毕业更近了。&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://enjoyhot.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://enjoyhot.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>ensemble-stacking</title>
    <link href="http://enjoyhot.github.io/2016/05/08/ensemble-stacking/"/>
    <id>http://enjoyhot.github.io/2016/05/08/ensemble-stacking/</id>
    <published>2016-05-08T09:04:30.000Z</published>
    <updated>2017-04-02T09:32:28.744Z</updated>
    
    <content type="html">&lt;h1 id=&quot;测试blog&quot;&gt;&lt;a href=&quot;#测试blog&quot; class=&quot;headerlink&quot; title=&quot;测试blog&quot;&gt;&lt;/a&gt;测试blog&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;相比 Blending，Stacking 能更好地利用训练数据。以 5-Fold Stacking 为例，它的基本原理如图所示：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160708170152466&quot; alt=&quot;stacking processing&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;整个过程很像 Cross Validation。&lt;br&gt;对于一个model，首先将训练数据分为 5 份，接下来一共5个迭代，每次迭代时，将 4 份数据作为 Training Set 对每个 Base Model 进行训练，然后在剩下一份 Hold-out Set 上进行预测。那么一个model训练最终将合成一个完整对于原始训练样本的预测单列矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同时也要将其在测试数据上的预测保存下来。这样，每个 Base Model 在每次迭代时会对训练数据的其中 1 份做出预测，对测试数据的全部做出预测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个model迭代都完成以后我们就获得了一个 #训练数据行数 x #Base Model 数量 的矩阵，这个矩阵接下来就作为第二层的 Model 的训练数据。当第二层的 Model 训练完以后，将之前保存的 Base Model 对测试数据的预测（因为每个 Base Model 被训练了 5 次，对测试数据的全体做了 5 次预测，所以对这 5 次求一个平均值形成一列，多个model形成多列，从而得到一个形状与第二层训练数据相同的矩阵）拿出来让它进行预测，就得到最后的输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;总的来说，Stacking 方法比任何单一模型的效果都要好，而且不仅成功应用在了监督式学习中，也成功应用在了非监督式(概率密度估计)学习中。甚至应用于估计bagging模型的错误率。据论文Feature-Weighted Linear Stacking(Sill, J. and Takacs, G. and Mackey L. and Lin D., 2009, arXiv:0911.0460)而言，Stacking比Bayesian Model Averaging表现要更好！此外在Kaggle上，很多比赛多是通过Stacking获取优秀的结果！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试blog&quot;&gt;&lt;a href=&quot;#测试blog&quot; class=&quot;headerlink&quot; title=&quot;测试blog&quot;&gt;&lt;/a&gt;测试blog&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;相比 Blending，Stacking 能更好地利用训练数据。以 5-Fold Stacking 为例，它的基本原理如图所示：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160708170152466&quot; alt=&quot;stacking processing&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>MS-document-online-preview</title>
    <link href="http://enjoyhot.github.io/2016/03/12/MS-document-online-preview/"/>
    <id>http://enjoyhot.github.io/2016/03/12/MS-document-online-preview/</id>
    <published>2016-03-12T10:41:00.000Z</published>
    <updated>2017-04-02T09:32:28.860Z</updated>
    
    <content type="html">&lt;h1 id=&quot;doc-xls-ppt-pdf实现浏览器在线预览小记&quot;&gt;&lt;a href=&quot;#doc-xls-ppt-pdf实现浏览器在线预览小记&quot; class=&quot;headerlink&quot; title=&quot;doc,xls,ppt,pdf实现浏览器在线预览小记&quot;&gt;&lt;/a&gt;doc,xls,ppt,pdf实现浏览器在线预览小记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一般有两种方式&quot;&gt;&lt;a href=&quot;#一般有两种方式&quot; class=&quot;headerlink&quot; title=&quot;一般有两种方式&quot;&gt;&lt;/a&gt;一般有两种方式&lt;/h2&gt;&lt;h3 id=&quot;方式一：&quot;&gt;&lt;a href=&quot;#方式一：&quot; class=&quot;headerlink&quot; title=&quot;方式一：&quot;&gt;&lt;/a&gt;方式一：&lt;/h3&gt;&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;文档（PDF，Word，PPT等）–&amp;gt;PDF–&amp;gt;浏览器加载pdf插件在线浏览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;转换pdf的软件：&quot;&gt;&lt;a href=&quot;#转换pdf的软件：&quot; class=&quot;headerlink&quot; title=&quot;转换pdf的软件：&quot;&gt;&lt;/a&gt;转换pdf的软件：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;office:&lt;/strong&gt;调用com接口，从而调用软件运行转换程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Openoffice：&lt;/strong&gt; 目前隶属于Apache，从Openoffice.org沿袭而来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LibreOffice：&lt;/strong&gt; OpenOffice.org的分支,第一个正式版。 为3.3，对格式和字体的支持、对插件扩展与Openoffice有所侧重。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;目前网络上各种转换方法，归根到底大多用到前两者，只是做了不同的代码封装。特别提一下，&lt;strong&gt;jacob.jar&lt;/strong&gt;实现Word转换成PDF，一般用于Java，本质上也还是调用office。&lt;/p&gt;
&lt;h3 id=&quot;doc2pdf软件优缺点&quot;&gt;&lt;a href=&quot;#doc2pdf软件优缺点&quot; class=&quot;headerlink&quot; title=&quot;doc2pdf软件优缺点&quot;&gt;&lt;/a&gt;doc2pdf软件优缺点&lt;/h3&gt;&lt;p&gt;（针对pythoner来说）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;office:&lt;/strong&gt;自己安装com接口插件，调用软件运行转换程序,软件过于庞大，对于性能不太好的机器有时可能会崩溃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Openoffice：&lt;/strong&gt; 自带调用com接口API，python2.7.6内核，但是对于doc,docx格式兼容不好，转换格式不兼容的字体或者表格排版就呵呵了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LibreOffice：&lt;/strong&gt;自带调用com接口API，python3.3内核，暂时找不到2.7的，对doc,docx兼容较好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前自三种软件调用的脚步程序一抓一大把，都大致差不多，要注意的地方是，Dispatch, constants参数的慎重选择，如constants.wdXXX有时获取不靠谱，需要自己指定值。&lt;/p&gt;
&lt;h3 id=&quot;浏览器pdf插件&quot;&gt;&lt;a href=&quot;#浏览器pdf插件&quot; class=&quot;headerlink&quot; title=&quot;浏览器pdf插件&quot;&gt;&lt;/a&gt;浏览器pdf插件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载自动安装有pdf插件的浏览器，目前chrome、搜狗、火狐都支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载各种pdf阅读器进行关联，浏览器代理设置允许加载pdf阅读插件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载js插件，需要浏览器支持才行，不然还是会变成下载。&lt;a href=&quot;http://www.cnblogs.com/58top/archive/2012/11/26/a-list-of-jquery-pdf-viewers-available-at-the-moment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/58top/archive/2012/11/26/a-list-of-jquery-pdf-viewers-available-at-the-moment.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;试过：PDFObject，jQuery Media Plugin&lt;/p&gt;
&lt;h3 id=&quot;方式二：&quot;&gt;&lt;a href=&quot;#方式二：&quot; class=&quot;headerlink&quot; title=&quot;方式二：&quot;&gt;&lt;/a&gt;方式二：&lt;/h3&gt;&lt;h3 id=&quot;步骤-1&quot;&gt;&lt;a href=&quot;#步骤-1&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;文档（PDF，Word，PPT等）–&amp;gt;PDF–&amp;gt;转换为SWF–&amp;gt; 使用FlexPaper在线浏览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Openoffice：&lt;/strong&gt; word转pdf，同上分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SWFTools：&lt;/strong&gt;将PDF转换为swf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FlexPaper：&lt;/strong&gt;一个开源轻量级的在浏览器上显示各种文档的组件，已经嵌入了flash播放器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;目前的优缺点&quot;&gt;&lt;a href=&quot;#目前的优缺点&quot; class=&quot;headerlink&quot; title=&quot;目前的优缺点&quot;&gt;&lt;/a&gt;目前的优缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;转换成功后crash的可能应该比直接用pdf低，保密性也较好，防复制防保存的功能可以进一步开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兼容性较好，无需担心浏览器插件问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理流程多，对系统负担加大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转换为html非常不靠谱。&lt;br&gt;转换为html非常不靠谱。&lt;br&gt;转换为html非常不靠谱。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;doc-xls-ppt-pdf实现浏览器在线预览小记&quot;&gt;&lt;a href=&quot;#doc-xls-ppt-pdf实现浏览器在线预览小记&quot; class=&quot;headerlink&quot; title=&quot;doc,xls,ppt,pdf实现浏览器在线预览小记&quot;&gt;&lt;/a&gt;doc,xls,ppt,pdf实现浏览器在线预览小记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一般有两种方式&quot;&gt;&lt;a href=&quot;#一般有两种方式&quot; class=&quot;headerlink&quot; title=&quot;一般有两种方式&quot;&gt;&lt;/a&gt;一般有两种方式&lt;/h2&gt;&lt;h3 id=&quot;方式一：&quot;&gt;&lt;a href=&quot;#方式一：&quot; class=&quot;headerlink&quot; title=&quot;方式一：&quot;&gt;&lt;/a&gt;方式一：&lt;/h3&gt;&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;文档（PDF，Word，PPT等）–&amp;gt;PDF–&amp;gt;浏览器加载pdf插件在线浏览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;转换pdf的软件：&quot;&gt;&lt;a href=&quot;#转换pdf的软件：&quot; class=&quot;headerlink&quot; title=&quot;转换pdf的软件：&quot;&gt;&lt;/a&gt;转换pdf的软件：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;office:&lt;/strong&gt;调用com接口，从而调用软件运行转换程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Openoffice：&lt;/strong&gt; 目前隶属于Apache，从Openoffice.org沿袭而来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LibreOffice：&lt;/strong&gt; OpenOffice.org的分支,第一个正式版。 为3.3，对格式和字体的支持、对插件扩展与Openoffice有所侧重。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://enjoyhot.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://enjoyhot.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>linux系统管理常用命令（不定时更新）</title>
    <link href="http://enjoyhot.github.io/2016/02/09/linux-management-command/"/>
    <id>http://enjoyhot.github.io/2016/02/09/linux-management-command/</id>
    <published>2016-02-09T13:51:00.000Z</published>
    <updated>2017-04-02T09:32:28.804Z</updated>
    
    <content type="html">&lt;h2 id=&quot;运行脚本的方法&quot;&gt;&lt;a href=&quot;#运行脚本的方法&quot; class=&quot;headerlink&quot; title=&quot;运行脚本的方法&quot;&gt;&lt;/a&gt;运行脚本的方法&lt;/h2&gt;&lt;h3 id=&quot;常用运行方法&quot;&gt;&lt;a href=&quot;#常用运行方法&quot; class=&quot;headerlink&quot; title=&quot;常用运行方法:&quot;&gt;&lt;/a&gt;常用运行方法:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ bash a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ chmod +x a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ./a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ source a.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用bash和用source的不同在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用bash执行时，shell script其实是在在父程序bash下新建了一个 bash子程序，之后这个子程序中执行，当程序执行完后，shell script里定义的变量都会随子程序的结束而消失；&lt;/li&gt;
&lt;li&gt;用source执行时，是在父程序bash中执行,shell script里定义的变量都还在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;shell-script的追踪与Debug&quot;&gt;&lt;a href=&quot;#shell-script的追踪与Debug&quot; class=&quot;headerlink&quot; title=&quot;shell script的追踪与Debug&quot;&gt;&lt;/a&gt;shell script的追踪与Debug&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sh -n xx.sh # 语法检查&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sh -x xx.sh # 列出xx.sh的执行过程&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;脚本输入输出例子&quot;&gt;&lt;a href=&quot;#脚本输入输出例子&quot; class=&quot;headerlink&quot; title=&quot;脚本输入输出例子&quot;&gt;&lt;/a&gt;脚本输入输出例子&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# !/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Program:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   This program is used to ouput parameter of the shell script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# History:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 2013/2/3 on_1y First release&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PATH=$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The script&amp;apos;s name is ==&amp;gt; $0&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;Total parameter number is ==&amp;gt; $#&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Check whether number of the parameter is less than 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ &amp;quot;$#&amp;quot; -lt 2 ] &amp;amp;&amp;amp; echo &amp;quot;The number of parameter is less than 2.Stop here.&amp;quot; &amp;amp;&amp;amp; exit 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The whole parameter is ==&amp;gt; &amp;apos;$@&amp;apos;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The first parameter is ==&amp;gt; $1&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The first parameter is ==&amp;gt; $2&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入和输出为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ bash sh05.sh 1a 2b 3c 4d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The script&amp;apos;s name is ==&amp;gt; sh05.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total parameter number is ==&amp;gt; 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The whole parameter is ==&amp;gt; &amp;apos;1a 2b 3c 4d&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first parameter is ==&amp;gt; 1a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first parameter is ==&amp;gt; 2b&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;test命令&quot;&gt;&lt;a href=&quot;#test命令&quot; class=&quot;headerlink&quot; title=&quot;test命令&quot;&gt;&lt;/a&gt;test命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;test -e a.txt &amp;amp;&amp;amp; echo &amp;quot;exists&amp;quot; || echo &amp;quot;not exists&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当a.txt存在时，执行echo “exists”，否则执行echo “not exists”，多个命令用&amp;amp;&amp;amp;连接即可。改变test参数可以进行多种决策判断，可以研究一下。&lt;/p&gt;
&lt;h2 id=&quot;关闭apache&quot;&gt;&lt;a href=&quot;#关闭apache&quot; class=&quot;headerlink&quot; title=&quot;关闭apache&quot;&gt;&lt;/a&gt;关闭apache&lt;/h2&gt;&lt;h3 id=&quot;版本一&quot;&gt;&lt;a href=&quot;#版本一&quot; class=&quot;headerlink&quot; title=&quot;版本一&quot;&gt;&lt;/a&gt;版本一&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/init.d/httpd stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;版本二&quot;&gt;&lt;a href=&quot;#版本二&quot; class=&quot;headerlink&quot; title=&quot;版本二&quot;&gt;&lt;/a&gt;版本二&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/init.d/apache2 stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查看端口&quot;&gt;&lt;a href=&quot;#查看端口&quot; class=&quot;headerlink&quot; title=&quot;查看端口&quot;&gt;&lt;/a&gt;查看端口&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;netstat -anp | grep &lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(Not all processes could be identified, non-owned process info&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; will &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; be shown, you would have to be root to see it all.)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tcp        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;53570&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;        ESTABLISHED -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tcp6       &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;        :::*                    LISTEN      -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tcp6       &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;        &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;53570&lt;/span&gt;       ESTABLISHED -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unix  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;      [ ]         STREAM     CONNECTED     &lt;span class=&quot;number&quot;&gt;105509200&lt;/span&gt; -&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数说明：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-p  process&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-a  all,显示所有连接和监听端口。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-n  以数字显示地址和端口（否则忽略虚拟机动态ip，127.0.0.1会以localhost显示）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;进程相关&quot;&gt;&lt;a href=&quot;#进程相关&quot; class=&quot;headerlink&quot; title=&quot;进程相关&quot;&gt;&lt;/a&gt;进程相关&lt;/h2&gt;&lt;h3 id=&quot;top&quot;&gt;&lt;a href=&quot;#top&quot; class=&quot;headerlink&quot; title=&quot;top&quot;&gt;&lt;/a&gt;top&lt;/h3&gt;&lt;p&gt;相关命令：c,m,u等&lt;/p&gt;
&lt;h3 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;headerlink&quot; title=&quot;ps&quot;&gt;&lt;/a&gt;ps&lt;/h3&gt;&lt;p&gt;显示瞬间行程(process)的动态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用权限：&lt;/strong&gt;所有使用者&lt;br&gt;&lt;strong&gt;使用方式：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ps [options] [--help]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;br&gt;ps的参数非常多,在此仅列出几个常用的参数并大略介绍含义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-A  列出所有的进程&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-w  显示加宽可以显示较多的资讯&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-au 显示较详细的资讯&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-aux 显示所有包含其他使用者的行程&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可添加过滤用户：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;| grep xx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;杀死进程：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;kill -s 9 xxx(pid)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 等价于&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kill -9 xxx(pid)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看运行进程的绝对路径&quot;&gt;&lt;a href=&quot;#查看运行进程的绝对路径&quot; class=&quot;headerlink&quot; title=&quot;查看运行进程的绝对路径&quot;&gt;&lt;/a&gt;查看运行进程的绝对路径&lt;/h3&gt;&lt;p&gt;先通过top或其它命令查看pid，再通过以下命令查看真实运行路径：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ls -al /proc/24416/exe&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lrwxrwxrwx 1 hadoop hadoop 0 Apr  1 21:51 /proc/24416/exe -&amp;gt; /home/hadoop/jdk1.8.0_40/bin/java&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件编码&quot;&gt;&lt;a href=&quot;#文件编码&quot; class=&quot;headerlink&quot; title=&quot;文件编码&quot;&gt;&lt;/a&gt;文件编码&lt;/h2&gt;&lt;p&gt;当将可执行的文件从windows系统搬到linux下，可能会报类似’\r’ 找不到命令的错误，那是因为shell命令中格式与dos命令格式不对造成的，只需要运行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dos2unix file.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件统计&quot;&gt;&lt;a href=&quot;#文件统计&quot; class=&quot;headerlink&quot; title=&quot;文件统计&quot;&gt;&lt;/a&gt;文件统计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对当前路径下文件的存储进行从大到小的排序并打印，显示G,MB,K等&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;du -sh * | sort -rh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计第二行逗号出现的次数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sed -n &amp;apos;2 p&amp;apos; test.csv/part-00000 |grep -o &amp;quot;,&amp;quot;|wc -l&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并操作&lt;br&gt;感受下paste的魅力：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;paste -d &amp;quot; &amp;quot;  - - - - &amp;lt; 16_1.fastq&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用户操作&quot;&gt;&lt;a href=&quot;#用户操作&quot; class=&quot;headerlink&quot; title=&quot;用户操作&quot;&gt;&lt;/a&gt;用户操作&lt;/h2&gt;&lt;h3 id=&quot;增加用户&quot;&gt;&lt;a href=&quot;#增加用户&quot; class=&quot;headerlink&quot; title=&quot;增加用户&quot;&gt;&lt;/a&gt;增加用户&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法1&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;useradd -d /data/home/user1 -s /bin/bash -m user1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passwd user1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法2&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;adduser --home /software/home/xxx xxx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vim /etc/passwd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;添加组&quot;&gt;&lt;a href=&quot;#添加组&quot; class=&quot;headerlink&quot; title=&quot;添加组&quot;&gt;&lt;/a&gt;添加组&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# add to hadoop groups&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo usermod -a -G hadoop user1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;移除组&quot;&gt;&lt;a href=&quot;#移除组&quot; class=&quot;headerlink&quot; title=&quot;移除组&quot;&gt;&lt;/a&gt;移除组&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gpasswd -d 用户名 组名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;tmux工具&quot;&gt;&lt;a href=&quot;#tmux工具&quot; class=&quot;headerlink&quot; title=&quot;tmux工具&quot;&gt;&lt;/a&gt;tmux工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;删除panel:&lt;br&gt;  C-x + x&lt;/li&gt;
&lt;li&gt;迅速切换排版（水平或垂直）:&lt;br&gt;  C-x + 空格&lt;/li&gt;
&lt;li&gt;创建新窗口（panel)&lt;br&gt;  C-x + c&lt;/li&gt;
&lt;li&gt;进行切换:&lt;br&gt;  C-x + 数字键&lt;/li&gt;
&lt;li&gt;复制粘贴:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;C-x [ 进入复制模式&lt;/li&gt;
&lt;li&gt;参考上表移动鼠标到要复制的区域，移动鼠标时可用vim的搜索功能”/“,”?”&lt;/li&gt;
&lt;li&gt;安空格键开始选择复制区域&lt;/li&gt;
&lt;li&gt;选择完成后安enter键退出&lt;/li&gt;
&lt;li&gt;C-x ] 粘贴&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;清除区域内容：&lt;br&gt;C-l&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开机自启动&quot;&gt;&lt;a href=&quot;#开机自启动&quot; class=&quot;headerlink&quot; title=&quot;开机自启动&quot;&gt;&lt;/a&gt;开机自启动&lt;/h2&gt;&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h3&gt;&lt;p&gt;Ubuntu下，作为利用apt-get的常规软件，以Nginx为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编辑开机nginx启动脚本（自动安装的忽略）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/usr/local/nginx.sh&lt;/li&gt;
&lt;li&gt;在/etc/init.d目录下创建链接文件到前面的脚本： ln -s /usr/local/nginx.sh /etc/init.d/nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置nginx脚本可执行权限（自动安装的忽略）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod u+x /etc/init.d/nginx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入/etc/init.d目录，将该脚本设为开启自启动&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;update-rc.d -f nginx defaults [startnum] [killnum]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的[startnum]表示启动顺序，[killnum]表示退出顺序，都为可选参数，取值范围是0-99。序号越大的越晚执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果想取消开机自启动&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;update-rc.d -f nginx remove&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-f选项表示强制执行。&lt;/p&gt;
&lt;h2 id=&quot;端口映射&quot;&gt;&lt;a href=&quot;#端口映射&quot; class=&quot;headerlink&quot; title=&quot;端口映射&quot;&gt;&lt;/a&gt;端口映射&lt;/h2&gt;&lt;p&gt;nohup portforward :8080 cu01:8080 &amp;amp;&lt;/p&gt;
&lt;h2 id=&quot;更改文件权限&quot;&gt;&lt;a href=&quot;#更改文件权限&quot; class=&quot;headerlink&quot; title=&quot;更改文件权限&quot;&gt;&lt;/a&gt;更改文件权限&lt;/h2&gt;&lt;p&gt;chmod ［who］ ［+ | - | =］ ［mode］ 文件名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;权限范围：&lt;br&gt;u ：目录或者文件的当前的用户&lt;br&gt;g ：目录或者文件的当前的群组&lt;br&gt;o ：除了目录或者文件的当前用户或群组之外的用户或者群组&lt;br&gt;a ：所有的用户及群组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;权限代号：&lt;br&gt;r ：读权限，用数字4表示&lt;br&gt;w ：写权限，用数字2表示&lt;br&gt;x ：执行权限，用数字1表示&lt;br&gt;s ：特殊权限，如root般操作该文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g 为所有用户添加执行test.log的权限&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod a+x test.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用代号是最灵活的方式，但当只涉及对所有用户的，并且是直接设定某个权限，用数字是最直接的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod 764 test.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表示用户拥有所有权限，所在组其它成员拥有读写权限，其它用户只有读权限。&lt;/p&gt;
&lt;h2 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h2&gt;&lt;h3 id=&quot;初始化远程仓库&quot;&gt;&lt;a href=&quot;#初始化远程仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化远程仓库&quot;&gt;&lt;/a&gt;初始化远程仓库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd /SHARE/repositories/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkdir webpy &amp;amp; cd webpy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mkdir webpy.git &amp;amp; cd webpy.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git init --bare&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化本地仓库&quot;&gt;&lt;a href=&quot;#初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地仓库&quot;&gt;&lt;/a&gt;初始化本地仓库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd local_project&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git add .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git commit -m &amp;quot;xxx&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看、添加、修改远程仓库&quot;&gt;&lt;a href=&quot;#查看、添加、修改远程仓库&quot; class=&quot;headerlink&quot; title=&quot;查看、添加、修改远程仓库&quot;&gt;&lt;/a&gt;查看、添加、修改远程仓库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git remote -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git remote add origin gujw@192.168.0.2:/SHARE/repositories/webpy/webpy.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git remote set-url origin gujw@192.168.0.2:/SHARE/repositories/webpy/webpy.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tip：对于共享目录的仓库而言，修改client端的ip即可，远程仓库地址不变。&lt;/p&gt;
&lt;h3 id=&quot;修改github仓库&quot;&gt;&lt;a href=&quot;#修改github仓库&quot; class=&quot;headerlink&quot; title=&quot;修改github仓库&quot;&gt;&lt;/a&gt;修改github仓库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git remote add origin git@github.com:username/RepoName.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push origin master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运行脚本的方法&quot;&gt;&lt;a href=&quot;#运行脚本的方法&quot; class=&quot;headerlink&quot; title=&quot;运行脚本的方法&quot;&gt;&lt;/a&gt;运行脚本的方法&lt;/h2&gt;&lt;h3 id=&quot;常用运行方法&quot;&gt;&lt;a href=&quot;#常用运行方法&quot; class=&quot;headerlink&quot; title=&quot;常用运行方法:&quot;&gt;&lt;/a&gt;常用运行方法:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ bash a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ chmod +x a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ./a.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ source a.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用bash和用source的不同在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用bash执行时，shell script其实是在在父程序bash下新建了一个 bash子程序，之后这个子程序中执行，当程序执行完后，shell script里定义的变量都会随子程序的结束而消失；&lt;/li&gt;
&lt;li&gt;用source执行时，是在父程序bash中执行,shell script里定义的变量都还在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;shell-script的追踪与Debug&quot;&gt;&lt;a href=&quot;#shell-script的追踪与Debug&quot; class=&quot;headerlink&quot; title=&quot;shell script的追踪与Debug&quot;&gt;&lt;/a&gt;shell script的追踪与Debug&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sh -n xx.sh # 语法检查&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sh -x xx.sh # 列出xx.sh的执行过程&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;脚本输入输出例子&quot;&gt;&lt;a href=&quot;#脚本输入输出例子&quot; class=&quot;headerlink&quot; title=&quot;脚本输入输出例子&quot;&gt;&lt;/a&gt;脚本输入输出例子&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# !/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Program:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#   This program is used to ouput parameter of the shell script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# History:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 2013/2/3 on_1y First release&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PATH=$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The script&amp;apos;s name is ==&amp;gt; $0&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;Total parameter number is ==&amp;gt; $#&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Check whether number of the parameter is less than 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ &amp;quot;$#&amp;quot; -lt 2 ] &amp;amp;&amp;amp; echo &amp;quot;The number of parameter is less than 2.Stop here.&amp;quot; &amp;amp;&amp;amp; exit 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The whole parameter is ==&amp;gt; &amp;apos;$@&amp;apos;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The first parameter is ==&amp;gt; $1&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;The first parameter is ==&amp;gt; $2&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入和输出为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ bash sh05.sh 1a 2b 3c 4d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The script&amp;apos;s name is ==&amp;gt; sh05.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total parameter number is ==&amp;gt; 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The whole parameter is ==&amp;gt; &amp;apos;1a 2b 3c 4d&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first parameter is ==&amp;gt; 1a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The first parameter is ==&amp;gt; 2b&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;test命令&quot;&gt;&lt;a href=&quot;#test命令&quot; class=&quot;headerlink&quot; title=&quot;test命令&quot;&gt;&lt;/a&gt;test命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;test -e a.txt &amp;amp;&amp;amp; echo &amp;quot;exists&amp;quot; || echo &amp;quot;not exists&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当a.txt存在时，执行echo “exists”，否则执行echo “not exists”，多个命令用&amp;amp;&amp;amp;连接即可。改变test参数可以进行多种决策判断，可以研究一下。&lt;/p&gt;
&lt;h2 id=&quot;关闭apache&quot;&gt;&lt;a href=&quot;#关闭apache&quot; class=&quot;headerlink&quot; title=&quot;关闭apache&quot;&gt;&lt;/a&gt;关闭apache&lt;/h2&gt;&lt;h3 id=&quot;版本一&quot;&gt;&lt;a href=&quot;#版本一&quot; class=&quot;headerlink&quot; title=&quot;版本一&quot;&gt;&lt;/a&gt;版本一&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/init.d/httpd stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://enjoyhot.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://enjoyhot.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git 协作纪要</title>
    <link href="http://enjoyhot.github.io/2015/12/12/git-notes/"/>
    <id>http://enjoyhot.github.io/2015/12/12/git-notes/</id>
    <published>2015-12-12T10:41:00.000Z</published>
    <updated>2017-04-02T09:32:28.756Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、常用开发模式&quot;&gt;&lt;a href=&quot;#一、常用开发模式&quot; class=&quot;headerlink&quot; title=&quot;一、常用开发模式&quot;&gt;&lt;/a&gt;一、常用开发模式&lt;/h3&gt;&lt;p&gt;先看一张图&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204330712&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1、少用pull或不用pull；&lt;br&gt;2、本地的多个分支，如果不是用命令行的话，对文件修改是对所有分支内容修改。&lt;/p&gt;
&lt;p&gt;git clone -&amp;gt; 修改 -&amp;gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;以下分情况讨论：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、当你采用本地commit再远程push的连贯方式&lt;/p&gt;
&lt;p&gt;(将远程master获取到本地仓库假设为tmp，为后期查看log或merge等)&lt;br&gt;&lt;code&gt;git fetch origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;br&gt;(查看本地master和刚才fetch的origin/master直接2条差异，-p查看详细)&lt;br&gt;&lt;code&gt;git log master origin/master -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204450639&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;br&gt;(合并origin/master到本地的master，这一步往往比较揪心，可能有冲突，解决后需：&lt;br&gt;&lt;code&gt;git add xx
git commit xx&lt;/code&gt;&lt;br&gt;)&lt;/p&gt;
&lt;p&gt;当别人比你先提交时，会出现这个错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204609760&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决：&lt;br&gt;&lt;code&gt;git stash
git pull
git stash pop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204657548&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;(一个个文件查看改动，无问题则add，然后commit，然后git diff –stat看看还有多少)&lt;br&gt;&lt;code&gt;git diff -w app/auth/views.py&lt;/code&gt;&lt;br&gt;(add 一个少一个)&lt;br&gt;&lt;code&gt;git diff --stat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204729887&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;(记得commit)&lt;br&gt;&lt;code&gt;git merge origin/master&lt;/code&gt;&lt;br&gt;-&amp;gt;&lt;br&gt;(提交到远程origin/master)&lt;br&gt;&lt;code&gt;git push origin/master&lt;/code&gt;&lt;br&gt;2、当你采用本地commit，过一段较长时间再远程push的方式&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;br&gt;&lt;code&gt;git fetch origin master&lt;/code&gt;&lt;br&gt;-&amp;gt;&lt;br&gt;&lt;code&gt;git merge origin/master&lt;/code&gt;&lt;br&gt;这时那些不一致的就会发生冲突&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204824478&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改文件内容的冲突后，这时你通过git add和git commit可解决&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;br&gt;&lt;code&gt;git push origin/master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、tips&lt;/p&gt;
&lt;p&gt;当查看别人甚至做了一些调试，要撤销pull以来（或者说commit之后）的操作，则用git checkout&lt;br&gt;&lt;code&gt;git checkout -- filename&lt;/code&gt;&lt;br&gt;用暂存区中filename文件来覆盖工作区中的filename文件(慎用【git checkout . 】表示所有)。&lt;/p&gt;
&lt;h3 id=&quot;二、改进工作流&quot;&gt;&lt;a href=&quot;#二、改进工作流&quot; class=&quot;headerlink&quot; title=&quot;二、改进工作流&quot;&gt;&lt;/a&gt;二、改进工作流&lt;/h3&gt;&lt;p&gt;习惯了merge之后，对git的工作流维护也是相当重要，主要是方便差错，对于各个commit的整理也是有益的。&lt;br&gt;&lt;strong&gt;1、git rebase&lt;/strong&gt;&lt;br&gt;重新定义(re)起点(base),整合工作流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git checkout mywork
git merge origin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会生成如下的树（借用网上的图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160411171504432&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样C5、C6都属于工作流的一部分，当你回退到C5时就没应用到C4的修改，需要再进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果用rebase：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git checkout mywork
git rebase origin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把orgin的最新commit C4 作为当前分支mywork的基础，则生成的树图示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160411171935979&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配合远程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git pull --rebase origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;–rebase选项告诉Git，在同步了中央仓库的修改之后，将Mary所有的提交移到master分支的顶端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假如冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git add .
git rebase --continue&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：rebase的操作相对于merge操作，因为发生了时间跳跃，当发生冲突时会比较混乱（虽然 我还没遇到）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;三、分支&quot;&gt;&lt;a href=&quot;#三、分支&quot; class=&quot;headerlink&quot; title=&quot;三、分支&quot;&gt;&lt;/a&gt;三、分支&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、新建本地分支&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git branch gujw&lt;/code&gt;&lt;br&gt;&lt;strong&gt;2、查看本地分支&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;br&gt;&lt;strong&gt;3、切换本地分支&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git checkout gujw&lt;/code&gt;&lt;br&gt;示例：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212205233998&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、查看远程分支&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git branch -a&lt;/code&gt;&lt;br&gt;示例：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212205253447&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###三、仓库移动&lt;/p&gt;
&lt;p&gt;当远程仓库域名什么的发生变化，应该是比较常见的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、查看当前本地仓库链接到的远程仓库&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;br&gt;&lt;strong&gt;2、按照格式更改url即可&lt;/strong&gt;&lt;br&gt;&lt;code&gt;git remote set-url XXXXX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;###四、撤销操作&lt;/p&gt;
&lt;p&gt;如果你推送到remote的commit没有被其他人pull过，那么你可以使用&lt;br&gt;&lt;code&gt;git reset --hard &amp;lt;commit-hash&amp;gt;  //可以用客户端Amend代替
git push -f origin master&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;…&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、常用开发模式&quot;&gt;&lt;a href=&quot;#一、常用开发模式&quot; class=&quot;headerlink&quot; title=&quot;一、常用开发模式&quot;&gt;&lt;/a&gt;一、常用开发模式&lt;/h3&gt;&lt;p&gt;先看一张图&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151212204330712&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1、少用pull或不用pull；&lt;br&gt;2、本地的多个分支，如果不是用命令行的话，对文件修改是对所有分支内容修改。&lt;/p&gt;
&lt;p&gt;git clone -&amp;gt; 修改 -&amp;gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://enjoyhot.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://enjoyhot.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>通过欢迎度对网页排名</title>
    <link href="http://enjoyhot.github.io/2015/05/03/%E9%80%9A%E8%BF%87%E6%AC%A2%E8%BF%8E%E5%BA%A6%E5%AF%B9%E7%BD%91%E9%A1%B5%E6%8E%92%E5%90%8D/"/>
    <id>http://enjoyhot.github.io/2015/05/03/通过欢迎度对网页排名/</id>
    <published>2015-05-03T07:30:50.000Z</published>
    <updated>2017-04-02T09:32:28.968Z</updated>
    
    <content type="html">&lt;p&gt;声明：由于此次第一次使用动态加载的表达式，hexo对LaTex支持可能不太好，因此这里有些公式显示奇奇怪怪，排版比较好一点的参考csdn:&lt;a href=&quot;http://blog.csdn.net/gugugujiawei/article/details/45459089&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客链接&lt;/a&gt;,下次就直接上图片算了。免得这边不兼容。&lt;/p&gt;
&lt;h1 id=&quot;一、欢迎度历史&quot;&gt;&lt;a href=&quot;#一、欢迎度历史&quot; class=&quot;headerlink&quot; title=&quot;一、欢迎度历史&quot;&gt;&lt;/a&gt;一、欢迎度历史&lt;/h1&gt;&lt;p&gt;1998年 Jon Kleinberg致力于HITS的万维网搜索引擎项目，其中的算法使用了万维网的超链接结构来改进搜索引擎所得的结果。&lt;/p&gt;
&lt;p&gt;同时，在离他很近的斯坦福大学里，两名博士生正在从事一项名为PageRank的类似项目，分别是Sergey Brin和Larry Page。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这两个模型之间的联系令人吃惊。然而，Jon并未试图将HITS发展成为一家公司，不过后来企业家们却试着去做了，并因此而赋予了HITS那迟到的商业成功。搜索引擎Teoma的技术基础就是HITS算法的一个扩展。&lt;/p&gt;
&lt;p&gt;在介绍之前，我们先将万维网的超链接结构形成一个巨大的有向图，有向链接分为岀链和入链。&lt;/p&gt;
&lt;p&gt;网络有向图&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150503151630774&quot; alt=&quot;网络有向图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-PageRank&quot;&gt;&lt;a href=&quot;#1-1-PageRank&quot; class=&quot;headerlink&quot; title=&quot;1.1 PageRank&quot;&gt;&lt;/a&gt;1.1 PageRank&lt;/h2&gt;&lt;p&gt;Pagerank的论点是，如果一个网页被其他重要的页面所指向，那它就是重要的。值得注意的是，推荐者的地位对推荐的作用是有一定联系的，也与推荐者推荐的总数有所关联。&lt;/p&gt;
&lt;h2 id=&quot;1-2-HITS&quot;&gt;&lt;a href=&quot;#1-2-HITS&quot; class=&quot;headerlink&quot; title=&quot;1.2 HITS&quot;&gt;&lt;/a&gt;1.2 HITS&lt;/h2&gt;&lt;p&gt;HITS定义了枢纽（hub）和权威（authority），这是网页的属性，当然一个网页可以两者都是。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150503151736749&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;论点是，如果一个页面指向好的权威网页，那它就是一个好的枢纽网页（从而配上一个高的枢纽评分）；而如果一个网页被好的枢纽网页所指向，那它就是一个好的权威网页。&lt;/p&gt;
&lt;h2 id=&quot;1-3-查询相关性&quot;&gt;&lt;a href=&quot;#1-3-查询相关性&quot; class=&quot;headerlink&quot; title=&quot;1.3 查询相关性&quot;&gt;&lt;/a&gt;1.3 查询相关性&lt;/h2&gt;&lt;p&gt;如果每个页面的欢迎度评分是离线确定的，并且对于无论哪个查询而言（直至下次更新前）均保持恒定，则排名称为查询无关的&lt;br&gt;PageRank是查询无关的，HITS的原始版本是查询相关的。它们二者都可以修改为相反的那个类型。&lt;/p&gt;
&lt;h1 id=&quot;二、谷歌的PageRank数学&quot;&gt;&lt;a href=&quot;#二、谷歌的PageRank数学&quot; class=&quot;headerlink&quot; title=&quot;二、谷歌的PageRank数学&quot;&gt;&lt;/a&gt;二、谷歌的PageRank数学&lt;/h1&gt;&lt;h2 id=&quot;2-1-求和公式&quot;&gt;&lt;a href=&quot;#2-1-求和公式&quot; class=&quot;headerlink&quot; title=&quot;2.1 求和公式&quot;&gt;&lt;/a&gt;2.1 求和公式&lt;/h2&gt;&lt;p&gt;某个页面的Pi的PageRank记为r(Pi)，它是所有指向Pi的页面的PageRank之和。&lt;br&gt;$$ r(P&lt;em&gt;i) =\sum&lt;/em&gt;{P&lt;em&gt;j \in B&lt;/em&gt;{P_i}} \dfrac{r(P_j)}{|P&lt;em&gt;j|} $$&lt;br&gt;Bpi为指向Pi的页面集合，|Pj|是由Pj发出的岀链数量。&lt;br&gt;通过迭代的方式，解决通过未知页面的PageRank值得出另外未知页面的PageRank值。为了定义这一迭代过程，我们引入更多的记号，令$r&lt;/em&gt;{k+1}(P&lt;em&gt;i)$表示为页面Pi在第k+1次循环时的PageRank，则&lt;br&gt;$$ r&lt;/em&gt;{k+1}(P&lt;em&gt;i) =\sum&lt;/em&gt;{P&lt;em&gt;j \in B&lt;/em&gt;{P_i}} \dfrac{r_k(P_j)}{|P&lt;em&gt;j|}(1) $$&lt;br&gt;将所有页面Pi均具有$r&lt;/em&gt;{0}(P_i) =1/n$开始，并一直重复下去，直至收敛到稳定值。&lt;/p&gt;
&lt;h2 id=&quot;2-2求和方程的矩阵表示&quot;&gt;&lt;a href=&quot;#2-2求和方程的矩阵表示&quot; class=&quot;headerlink&quot; title=&quot;2.2求和方程的矩阵表示&quot;&gt;&lt;/a&gt;2.2求和方程的矩阵表示&lt;/h2&gt;&lt;p&gt;打个比方，以下面这个图为例&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150503151630774&quot; alt=&quot;网络有向图&quot;&gt;&lt;br&gt;我们引入一个n x n阶的矩阵H和一个1 x n阶的行向量$\pi^T$。矩阵H是一个行归一化超链接矩阵，则上图相应H为：&lt;br&gt;$$ H= \begin{matrix} \pmatrix{ 0 &amp;amp; 1/2 &amp;amp; 1/2 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \ 1/3 &amp;amp; 1/3 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/3 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/2 &amp;amp; 1/2 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/2 &amp;amp; 0 &amp;amp; 1/2 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \} \end{matrix} $$&lt;br&gt;向引入行向量$\pi^{(k)T}$，它表示在第k次循环时的PageRank向量。则(1)式可表示为：&lt;br&gt;$$\pi^{(k+1)T}=\pi^{(k)T}H (2)$$&lt;br&gt;从这个H矩阵可以看出一些端倪，书中总结出4个，我觉得关键在于在计算中通过矩阵计算降低复杂度，这在现实中是个稀疏矩阵，复杂度对于理论来说由平方降为1次。&lt;/p&gt;
&lt;h2 id=&quot;2-3迭代过程问题&quot;&gt;&lt;a href=&quot;#2-3迭代过程问题&quot; class=&quot;headerlink&quot; title=&quot;2.3迭代过程问题&quot;&gt;&lt;/a&gt;2.3迭代过程问题&lt;/h2&gt;&lt;p&gt;是否会收敛？收敛到唯一向量吗？是否与初始向量有关？收敛时间？&lt;/p&gt;
&lt;p&gt;以下分析为两位Google创始人解决的迭代问题。&lt;/p&gt;
&lt;p&gt;布林和佩奇最初利用$\pi^{(0)T}=1/ne^T$来开始迭代过程，但这可能导致排名下沉(rank sink)，譬如出现多个0，可比性降低，排名下沉很大程度上与悬挂节点（岀链为0）的出现有关。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，他们使用了随机上网者的概念，对H矩阵进行调整，随机上网者特点为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机岀链，包括悬挂节点&lt;/li&gt;
&lt;li&gt;随机上网者在某个特定页面上所停留的时间比例便是该页面相对重要性的一个度量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，我们将H矩阵变为随机矩阵S：&lt;br&gt;$$ S= \begin{matrix} \pmatrix{ 0 &amp;amp; 1/2 &amp;amp; 1/2 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \ 1/6 &amp;amp; 1/6 &amp;amp; 1/6 &amp;amp; 1/6 &amp;amp; 1/6 &amp;amp; 1/6 \ 1/3 &amp;amp; 1/3 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/3 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/2 &amp;amp; 1/2 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1/2 &amp;amp; 0 &amp;amp; 1/2 \ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \} \end{matrix} $$&lt;br&gt;可以证明，S是由H的一个秩一修正所给出的，即$S=H + a(1/n e^T)$，其中，若页面i为悬挂结点则ai=1，否则为0。二值向量a为悬挂结点向量，为列向量。&lt;/p&gt;
&lt;p&gt;然而，仅靠这一点还不够，未能达成存在唯一的正向量$\pi^T$ ,且方程能很快地收敛到$\pi^T$。要做到这一点，布林和佩奇做了另外一个调整，所谓的素性调整。&lt;strong&gt;有了这个调整，所得的矩阵就是随机的并且是素的。一个素矩阵是不可约的并且非周期的，因此，链的稳态向量存在且唯一&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;转换为素矩阵是基于这样一个论述的。上网者有时会在浏览器URL地址栏输入一个新的目的地，为了对这个行为进行数学建模，布林和佩奇创造了一个新的矩阵G如下：&lt;/p&gt;
&lt;p&gt;$$ G=\alpha S + (1-\alpha)1/n ee^T$$&lt;/p&gt;
&lt;p&gt;式中，a是一个0到1的标量(在之后的章节会反复提到a在谷歌中取0.85)，表示随机上网者根据万维网的超链接结构进行浏览的时间百分比。G成为&lt;strong&gt;谷歌矩阵&lt;/strong&gt;，$E=1/n ee^T$可称为跳转矩阵，是均匀分布的，即在进行跳转时是公平跳转。&lt;/p&gt;
&lt;p&gt;在书中，分为6点简单概括G带来的后果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G是随机的。&lt;/li&gt;
&lt;li&gt;G是不可约的。&lt;/li&gt;
&lt;li&gt;G是非周期的，Gii&amp;gt;0导致。&lt;/li&gt;
&lt;li&gt;G是素的。&lt;/li&gt;
&lt;li&gt;G是完全稠密的。从计算的角度，这是很糟糕的。但G可以写为非常稀疏的超链接矩阵H的秩一修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\begin{align}&lt;br&gt;G &amp;amp;=\alpha S + (1-\alpha)1/n ee^T \&lt;br&gt;&amp;amp; =\alpha (H + a(1/n e^T)) + (1-\alpha)1/n ee^T \&lt;br&gt;&amp;amp; =\alpha H+[\alpha(a)+(1-\alpha)e]1/ne^T&lt;br&gt;\end{align}&lt;/p&gt;
&lt;p&gt;因此，谷歌修正后的PageRank法为&lt;br&gt;$$\pi^{（k+1）T}=\pi^{（k）T}G$$&lt;/p&gt;
&lt;h2 id=&quot;2-4-PageRank向量的计算&quot;&gt;&lt;a href=&quot;#2-4-PageRank向量的计算&quot; class=&quot;headerlink&quot; title=&quot;2.4 PageRank向量的计算&quot;&gt;&lt;/a&gt;2.4 PageRank向量的计算&lt;/h2&gt;&lt;p&gt;将求解$\pi^T$转换为如下特征向量问题&lt;br&gt;$$\pi^T=\pi^TG \&lt;br&gt;    \pi^Te=1$$&lt;br&gt;将求解$\pi^T$转换为求解如下的性齐次系统：&lt;br&gt;$$\pi^T(E-G)=0^T \&lt;br&gt;    \pi^Te=1$$&lt;br&gt;第一个系统为找到对应于主特征值$\lambda_1=1$的G的归一化主左特征向量。在第二个系统中，目标则是找到E-G的归一化左零向量。两个系统均服从归一化方程$\pi^Te=1$，该方程确保$\pi^T$是一个概率向量。&lt;/p&gt;
&lt;h3 id=&quot;2-4-1-幂法计算&quot;&gt;&lt;a href=&quot;#2-4-1-幂法计算&quot; class=&quot;headerlink&quot; title=&quot;2.4.1 幂法计算&quot;&gt;&lt;/a&gt;2.4.1 幂法计算&lt;/h3&gt;&lt;p&gt;PageRank矩阵G的特点使得幂法成为了显而易见的最佳选择。幂法是求取矩阵主特征值和特征向量的最古老同时也是最简单的迭代方法之一。缺点的计算速度缓慢。&lt;br&gt;\begin{align} \pi^{（k+1）T} &amp;amp; =\pi^{（k）T}G \ &amp;amp; =\alpha S + (1-\alpha)1/n \pi^{（k）T} ee^T \ &amp;amp; =\alpha (H + a(1/n e^T)) + (1-\alpha)1/n ee^T \ &amp;amp; =\alpha \pi^{（k）T} H+[\alpha \pi^{（k）T} a+1-\alpha]e^T/n \end{align}&lt;br&gt;式中，向量-矩阵乘法$\alpha \pi^{（k）T} H$执行于H这个极端稀疏的矩阵之上，而S和G从来就没有被实际生成或存储过，每个向量-矩阵乘法的复杂度为O(n)，因为H的每一行有差不多10个非零元素，这就是使用幂法的主要原因。&lt;br&gt;这里还有几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;幂法中矩阵系数仅通过向量-矩阵乘法运算的程序来进行访问，而没有实际对矩阵加以操作。&lt;/li&gt;
&lt;li&gt;幂法存储方面，除了稀疏矩阵H和悬挂结点向量a之外，就只需要保存\alpha \pi^{（k）T}$了，这个向量是完全稠密的。&lt;/li&gt;
&lt;li&gt;迭代次数仅需50~100次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么仅需50次呢，解释一下，在马尔科夫链理论中给出了答案，一般而言，应用于某个矩阵的幂法的渐进收敛速率依赖于绝对值最大的两个特征值$\lambda_1$和$\lambda&lt;em&gt;2$的比值。确切来说，渐进收敛速率就是$ |\lambda&lt;/em&gt;/\lambda_1|^k \to 0 $的速率。&lt;/p&gt;
&lt;p&gt;对于G这样的随机矩阵，$\lambda_1=1$，由于G也是素的，因此$|\lambda_2|&amp;lt;1$。&lt;/p&gt;
&lt;p&gt;通过一些理论的支撑，有以下关系：&lt;br&gt;$$\lambda_k=\alpha \mu_k$$&lt;br&gt;其中$\mu_k&amp;lt;=1$&lt;/p&gt;
&lt;p&gt;在万维网结构中，$\mu_k$约等于1，因此，$|\mu_2(G)| \approx \alpha$。&lt;/p&gt;
&lt;p&gt;因此，渐进收敛速率在50次的情况为：&lt;br&gt;$$\alpha ^{50}=0.85^{50} \approx 0.000296$$&lt;br&gt;即在第50次迭代时，可以期望近似PageRank向量的精度大约为小数点后2~3位。这个精度已经足够了，当然要真正区分需要小数点后10位精度，但是当PageRank评分和内容评分结合起来之后，高精度就变得不那么重要了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;声明：由于此次第一次使用动态加载的表达式，hexo对LaTex支持可能不太好，因此这里有些公式显示奇奇怪怪，排版比较好一点的参考csdn:&lt;a href=&quot;http://blog.csdn.net/gugugujiawei/article/details/45459089&quot;&gt;博客链接&lt;/a&gt;,下次就直接上图片算了。免得这边不兼容。&lt;/p&gt;
&lt;h1 id=&quot;一、欢迎度历史&quot;&gt;&lt;a href=&quot;#一、欢迎度历史&quot; class=&quot;headerlink&quot; title=&quot;一、欢迎度历史&quot;&gt;&lt;/a&gt;一、欢迎度历史&lt;/h1&gt;&lt;p&gt;1998年 Jon Kleinberg致力于HITS的万维网搜索引擎项目，其中的算法使用了万维网的超链接结构来改进搜索引擎所得的结果。&lt;/p&gt;
&lt;p&gt;同时，在离他很近的斯坦福大学里，两名博士生正在从事一项名为PageRank的类似项目，分别是Sergey Brin和Larry Page。&lt;br&gt;
    
    </summary>
    
      <category term="Search Engine" scheme="http://enjoyhot.github.io/categories/Search-Engine/"/>
    
    
      <category term="Search Engine" scheme="http://enjoyhot.github.io/tags/Search-Engine/"/>
    
      <category term="PageRank" scheme="http://enjoyhot.github.io/tags/PageRank/"/>
    
  </entry>
  
  <entry>
    <title>网络搜索引擎简介</title>
    <link href="http://enjoyhot.github.io/2015/04/21/%E7%BD%91%E7%BB%9C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AE%80%E4%BB%8B/"/>
    <id>http://enjoyhot.github.io/2015/04/21/网络搜索引擎简介/</id>
    <published>2015-04-21T05:23:50.000Z</published>
    <updated>2017-04-02T09:32:28.968Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、传统信息检索回顾&quot;&gt;&lt;a href=&quot;#一、传统信息检索回顾&quot; class=&quot;headerlink&quot; title=&quot;一、传统信息检索回顾&quot;&gt;&lt;/a&gt;一、传统信息检索回顾&lt;/h1&gt;&lt;p&gt;传统信息检索文档集的搜索有三种基本的计算机辅助技术：布尔模型、向量空间模型和概率模型。这些模型发展与20世纪60年代，直到2000年6月，便存在3500种不同的搜索引擎技术，并且大多数搜索引擎仍然依赖于以上三种基本模型的一种或数种。下图摘自《搜索引擎-原理技术与系统》，显示了搜索的主干流程。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150421133224646&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##1.1 布尔搜索引擎&lt;br&gt;信息检索中最早而且最简单的检索方法之一。布尔逻辑检索也称作布尔逻辑搜索，严格意义上的布尔检索法是指利用布尔逻辑运算符连接各个检索词，然后由计算机进行相应逻辑运算，以找出所需信息的方法。它使用面最广、使用频率最高。布尔逻辑运算符的作用是把检索词连接起来，构成一个逻辑检索式。&lt;/p&gt;
&lt;p&gt;##1.2向量空间模型搜索引擎&lt;br&gt;向量空间模型将文本数据变换为数值向量和矩阵，然后使用矩阵分析方法来发现文档集中的关键特征和联系。某些高级向量空间模型，如LSI（Latent Semantic Indexing,隐性语义索引）等能访问文档集中隐含的语义结构，如搜索car,能返回automobile相关文档。&lt;br&gt;该模型还有另外两个优点是相关性评分和相关性反馈。缺点是计算开销大，查询时必须计算每个文档和查询之间的距离度量，因而也伴随着另一个缺点——向量空间模型无法很好地扩展。&lt;/p&gt;
&lt;h2 id=&quot;1-3概率模型搜索引擎&quot;&gt;&lt;a href=&quot;#1-3概率模型搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;1.3概率模型搜索引擎&quot;&gt;&lt;/a&gt;1.3概率模型搜索引擎&lt;/h2&gt;&lt;p&gt;用户给定一个查询请求，概率检索模型根据文档与用户请求的相关性排序文档，给出结果，举个简单的例子，对于信息检索的文档，最可能跟在information后面的词是retrieval，但独立性假设却认为任何词都会以等概率出现在information后面。重点在于相关性的定义与衡量。概率模型的构建和编程有可能十分困难，它们的复杂度上升得很快。&lt;/p&gt;
&lt;p&gt;##1.4元搜索引擎&lt;br&gt;传统搜索引擎其实还有第四种模型，即元搜素引擎。它将以上三种经典模型合为一体。&lt;/p&gt;
&lt;p&gt;##1.5搜索引擎的比较&lt;br&gt;两种最为常用的评价不同搜索方法的评价指标是查准率和查全率。查准率是指检索所得相关文献的数量占总的检索所得文献数量的比例；查全率是指检索所得相关文献数量占总的相关文献数量的比例。查准率和查全率越高，搜索引擎就越好。&lt;/p&gt;
&lt;p&gt;#二、网络搜索引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爬虫模块：蜘蛛&lt;/li&gt;
&lt;li&gt;页面仓库：蜘蛛满载页面而回，它们暂时以完整页面的形式存放在页面仓库中，而在被送到索引建立模块之前，新的页面将一直留在仓库中。&lt;/li&gt;
&lt;li&gt;索引建立模块：取出每个新的未压缩页面，并从中仅抽取出最为重要的描述，以生成该页面在不同索引中的一个压缩描述。&lt;/li&gt;
&lt;li&gt;索引：分为内容索引和特殊用途索引（如图像索引和PDF索引）&lt;/li&gt;
&lt;li&gt;查询模块：将用户的自然语言查询转化为搜索系统可以理解的语言，然后查询不同的索引以便回答查询。&lt;/li&gt;
&lt;li&gt;排名模块：接收相关页面集，并根据某个判断依据对其进行排名。区分能力的排名是结合两个分数得到的，它们分别是内容评分和欢迎度评分，共同确定了相关页面的总评分，并按照总评分的顺序将页面集呈现给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#三、网络爬行、索引建立和查询处理&lt;/p&gt;
&lt;p&gt;##3.1 网络爬行&lt;br&gt;特点：&lt;br&gt;1.爬行是一个永不停歇的过程&lt;br&gt;2.蜘蛛访问网页时，需做到有礼貌的访问，即对网站的影响降到最小，不然可能会被“惩处”&lt;br&gt;3.多个蜘蛛协调合作，制定最佳爬行策略，节省时间和精力，尽可能提高效率&lt;/p&gt;
&lt;p&gt;##3.2 内容索引&lt;br&gt;程序将分析页面内容并抽取有价值的信息，从而仅将页面中最为关键的核心部分传给适当的索引。有价值的信息存在于标题、描述和锚文本中，此外还有粗体显示的项、大字体显示的项和超链接等。建立索引后形成倒排文件，形如：&lt;br&gt;什么是倒排文件？如下例子（其中001~004对应为文档编号）：&lt;br&gt;001 xxx142 张三 男 18 元培&lt;br&gt;002 xxx205 李四 女 17 哲学&lt;br&gt;003 xxx187 王五 男 19 生物&lt;br&gt;004 xxx325 赵六 女 18 元培&lt;br&gt;而我们利用倒排文件来实现上述非关键码的查询，就能大大提高速度。对于前面的情况设计倒排表如下：&lt;br&gt;男 001，003&lt;br&gt;女 002，004&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;16&lt;br&gt;17 002&lt;br&gt;18 001，004&lt;br&gt;19 003&lt;br&gt;20&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;元培 001，004&lt;br&gt;生物 003&lt;br&gt;哲学 002&lt;/p&gt;
&lt;p&gt;##3.3查询处理&lt;br&gt;查询处理的结果，将以文档的相关评分返回，举个例子。&lt;br&gt;在文档集中查询项a和项b的组合词ab，返回的结果有：&lt;br&gt;项a : 3[1,1,27],94[1,0,7],673[0,0,3]&lt;br&gt;项b : 3[1,1,10,94[0,0,5] ,673[1,1,14]&lt;br&gt;如94[1,0,7]中，1表示的是项a在页面94的标题中出现了，0表示项a在页面的描述标签未出现，7表示项a在页面94中出现了7次。&lt;br&gt;因此，内容得分可以这样来计算：&lt;br&gt;内容得分（页面3）= （1+1+27）x (1+1+10)=348&lt;br&gt;内容得分(页面94)=（1+0+7）x (0+0+5)=40&lt;br&gt;内容得分(页面673)=（0+0+3）x (1+1+14)=48&lt;/p&gt;
&lt;p&gt;有多种方案可以利用许多其它的因子来构成内容评分，这里只是随便举了一种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容评分和欢迎度评分决定了一个网页的最终评分，由于本书的重点在与欢迎度评分，因为在之后的介绍中将不多涉及内容评分。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、传统信息检索回顾&quot;&gt;&lt;a href=&quot;#一、传统信息检索回顾&quot; class=&quot;headerlink&quot; title=&quot;一、传统信息检索回顾&quot;&gt;&lt;/a&gt;一、传统信息检索回顾&lt;/h1&gt;&lt;p&gt;传统信息检索文档集的搜索有三种基本的计算机辅助技术：布尔模型、向量空间模型和概率模型。这些模型发展与20世纪60年代，直到2000年6月，便存在3500种不同的搜索引擎技术，并且大多数搜索引擎仍然依赖于以上三种基本模型的一种或数种。下图摘自《搜索引擎-原理技术与系统》，显示了搜索的主干流程。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150421133224646&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Search Engine" scheme="http://enjoyhot.github.io/categories/Search-Engine/"/>
    
    
      <category term="Search Engine" scheme="http://enjoyhot.github.io/tags/Search-Engine/"/>
    
      <category term="PageRank" scheme="http://enjoyhot.github.io/tags/PageRank/"/>
    
  </entry>
  
  <entry>
    <title>export CSDN blog to Markdown</title>
    <link href="http://enjoyhot.github.io/2015/03/29/CSDN2Markdown/"/>
    <id>http://enjoyhot.github.io/2015/03/29/CSDN2Markdown/</id>
    <published>2015-03-29T08:40:00.000Z</published>
    <updated>2017-04-02T09:32:28.720Z</updated>
    
    <content type="html">&lt;p&gt;#一、综述&lt;/p&gt;
&lt;p&gt;最开始的博客用的是oschina, 自我感觉小清新，支持比较多风格的编辑器，容易编辑程度比csdn的要好。后来因为csdn人气的关系，又转到csdn，不过csdn编辑确实比较虐心，再后来就在服务器上搭一个WordPress的博客，不过用起来不是很爽。几个月前支持Markdown编辑，这无疑给用github pages的用户一个福音，因为可以直接上传到自己的github博客上。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;用github pages生成静态的页面，目前比较流行有Jekyll,Octopress,Hexo等，其他的我没怎么调查，jekyll是github推荐的，上面有他们给的官方框架、主题，支持网页书写Markdown文章。后两者需要编译后再上传，github上呈现出来的是html文件。总体而言，后两者的界面更好，用起来更加舒适。我用的是Hexo，命令简洁，不过要注意备份整个工程，不然后果不堪设想。&lt;/p&gt;
&lt;p&gt;#二、迁移CSDN原文档到github Pages&lt;/p&gt;
&lt;p&gt;###1、前文&lt;br&gt;虽然目前CSDN支持markdown，但以前的文章都是用xeditor编辑器写的，不能导出，所以调研了方法。&lt;br&gt;总体而言有两种方法，但好像没多少人采用，因为格式可能不好。&lt;br&gt;1.爬取页面，导出html，然后在放在hexo中，目录为/source/_post/，直接放html文件，然后设置layout：false，那么hexo会忽略对html的编译，在浏览时直接超链接到html文件&lt;br&gt;2.将html文件再用程序转换为markdown&lt;br&gt;3.直接用代码爬取页面然后生成markdown文件&lt;/p&gt;
&lt;p&gt;第1种方法可能会遇到html文件中格式不支持的情况，没得到解决；&lt;br&gt;第2种方法发现在线转换效果也不好，就寻求代码解决，github上有一段&lt;a href=&quot;https://github.com/baizhebz/html2markdown4blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序&lt;/a&gt;，作者说可行，不过我环境没搭成功，不懂php，更何况要装curl（这个之前做android时NDK开发时也很难配置），后来用第3种方法就直接写python爬虫程序，参考github的一段&lt;a href=&quot;https://github.com/kesalin/PythonSnippet/blob/master/ExportCSDNBlog.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序&lt;/a&gt;，不过程序有些问题，也有些不符合如今CSDN的布局，所以我大改了一下，转为markdown的那一部分程序脉络是差不多的，这个也是最关键的部分，直接影响到markdown的显示，不过我也做得不太好。&lt;/p&gt;
&lt;p&gt;###2、程序&lt;br&gt;所需安装库：&lt;br&gt;BeautifulSoup&lt;br&gt;根据版本不同可能要改动相应的代码，一般不用改。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;232&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;233&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;234&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;235&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;236&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;237&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;238&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;239&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;240&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;241&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;242&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;243&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;244&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;245&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;246&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;247&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;248&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;249&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;250&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;251&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;252&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;253&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#! /usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; logging&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; threading&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; traceback&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;reload(sys)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sys.setdefaultencoding(&lt;span class=&quot;string&quot;&gt;&#39;gb18030&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# global variable&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;blog = &lt;span class=&quot;string&quot;&gt;&quot;http://blog.csdn.net&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://blog.csdn.net/gugugujiawei?viewmode=contents&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;outputDir = &lt;span class=&quot;string&quot;&gt;&#39;F:\\linux\\Share\\github\\article\\&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gRetryCount = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decodeHtmlSpecialCharacter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(htmlStr)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    specChars = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;ensp;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;emsp;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;nbsp;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;lt;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;gt&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;amp;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;quot;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;copy;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;®&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;times;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;×&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;divide;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;÷&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; specChars.keys():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        htmlStr = htmlStr.replace(key, specChars[key])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; htmlStr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repalceInvalidCharInFilename&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    specChars = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;\\&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;小于&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;大于&quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;|&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot; and &quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt; :&lt;span class=&quot;string&quot;&gt;&quot; or &quot;&lt;/span&gt;, \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; specChars.keys():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename = filename.replace(key, specChars[key])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getPageUrlList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; blog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#获取所有的页面的 url&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    user_agent = &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/4.0 (compatible;  MSIE 5.5; Windows NT)&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    header = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt; : user_agent &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    request = urllib2.Request(url, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, header)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    response = urllib2.urlopen(request)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data = response.read()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    soup = BeautifulSoup(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pageListDocs = soup.find_all(id=&lt;span class=&quot;string&quot;&gt;&quot;article_list&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# artclie----&amp;#123;url:title&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    articleUrlTitle = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print len(pageListDocs)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pageList &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pageListDocs:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        h1List = pageList.find_all(&lt;span class=&quot;string&quot;&gt;&#39;h1&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; articleList &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; h1List:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            hrefDocs = articleList.find_all(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(hrefDocs) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                articleHrefDoc = hrefDocs[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#print &quot;hello&quot;,articleHrefDoc&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                articleUrl =  blog + articleHrefDoc[&lt;span class=&quot;string&quot;&gt;&quot;href&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                articleTitle = articleHrefDoc.text&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                articleUrlTitle[articleUrl] = articleTitle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;the count of articles is&#39;&lt;/span&gt;,len(articleUrlTitle)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for s in articleUrlTitle:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print s,&#39;--&#39;,articleUrlTitle[s]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; articleUrlTitle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url, title)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 下载文章，并保存为 markdown 格式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    logging.info(&lt;span class=&quot;string&quot;&gt;&quot; &amp;gt;&amp;gt; download: &quot;&lt;/span&gt; + url)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;downloading the article&#39;&lt;/span&gt;,title&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data = &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    title = &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt; + title + &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    categories = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#postDate = datetime.datetime.now()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; gRetryCount&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count &amp;gt;= gRetryCount:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        count = count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            time.sleep(&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#访问太快会不响应&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            user_agent = &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/4.0 (compatible;  MSIE 5.5; Windows NT)&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            header = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt; : user_agent &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            request = urllib2.Request(url, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, header)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            response = urllib2.urlopen(request)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            data = response.read()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception,e:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exstr = traceback.format_exc()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            logging.info(&lt;span class=&quot;string&quot;&gt;&quot; &amp;gt;&amp;gt; failed to download &quot;&lt;/span&gt; + url + &lt;span class=&quot;string&quot;&gt;&quot;, retry: &quot;&lt;/span&gt; + str(count) + &lt;span class=&quot;string&quot;&gt;&quot;, error:&quot;&lt;/span&gt; + exstr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data == &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        logging.info(&lt;span class=&quot;string&quot;&gt;&quot; &amp;gt;&amp;gt; failed to download &quot;&lt;/span&gt; + url)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    soup = BeautifulSoup(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#date=link_postdate&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    manageDocs = soup.find_all(&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;article_manage&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; managerDoc &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; manageDocs:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        categoryDoc = managerDoc.find_all(&lt;span class=&quot;string&quot;&gt;&quot;span&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;link_categories&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(categoryDoc) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            categories = categoryDoc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].a.get_text().encode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;).strip()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            categories  = categories.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;).encode(&lt;span class=&quot;string&quot;&gt;&#39;gb2312&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        postDateDoc = managerDoc.find_all(&lt;span class=&quot;string&quot;&gt;&quot;span&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;link_postdate&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(postDateDoc) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            postDateStr = postDateDoc[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].string.encode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;).strip()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            postDate = datetime.datetime.strptime(postDateStr, &lt;span class=&quot;string&quot;&gt;&#39;%Y-%m-%d %H:%M&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;date&#39;&lt;/span&gt;,postDate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentDocs = soup.find_all(id=&lt;span class=&quot;string&quot;&gt;&quot;article_content&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; contentDoc &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; contentDocs:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        htmlContent = contentDoc.prettify().encode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#print htmlContent&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#file = open(&#39;F:\\linux\\Share\\github\\out2.txt&#39;,&#39;a+&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#file.write(htmlContent)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        content = htmlContent2String(htmlContent)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    exportToMarkdown(outputDir, postDate, categories, title, content)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# htmlContent2String 是整个程序的关键，用于将html转换为markdown格式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;htmlContent2String&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(contentStr)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 因为格式中可能会有点乱，换行符乱入，所以用[\s\S]匹配任何字符，包括换行符，注意其中的？是为了去除贪婪匹配&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &amp;lt;img src=&quot;http://img.blog.csdn.net/20150118194525562&quot; align=&quot;middle&quot; width=&quot;400 height=&quot;300&quot; alt=&quot;&quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 图片链接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    patternImg = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;(&amp;lt;img[\s\S]+?src=&quot;)([\s\S]+?)(&quot;[\s\S]+?&amp;gt;)&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &amp;lt;a target=&quot;_blank&quot; href=&quot;http://blog.csdn.net/gugugujiawei/article/details/42558411&quot;&amp;gt;博文&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 文字链接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    patternHref = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;(&amp;lt;a[\s\S]+?href=&quot;)([\s\S]*?)(&quot;[\s\S]*?&amp;gt;)([\s\S]+?)(&amp;lt;/a&amp;gt;)&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 去除html各种标签，这里的？则是指匹配0次或1次&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    patternRemoveHtml = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;&amp;lt;/?[^&amp;gt;]+&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resultContent = patternImg.sub(&lt;span class=&quot;string&quot;&gt;r&#39;![image_mark](\2)&#39;&lt;/span&gt;, contentStr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resultContent = patternHref.sub(&lt;span class=&quot;string&quot;&gt;r&#39;[\4](\2)&#39;&lt;/span&gt;, resultContent)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resultContent = re.sub(patternRemoveHtml, &lt;span class=&quot;string&quot;&gt;r&#39;&#39;&lt;/span&gt;, resultContent)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resultContent = decodeHtmlSpecialCharacter(resultContent)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#file = open(&#39;F:\\linux\\Share\\github\\out3.txt&#39;,&#39;a+&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#file.write(resultContent)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resultContent&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exportToMarkdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(exportDir, postdate, categories, title, content)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    titleDate = postdate.strftime(&lt;span class=&quot;string&quot;&gt;&#39;%Y-%m&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentDate = postdate.strftime(&lt;span class=&quot;string&quot;&gt;&#39;%Y-%m-%d %H:%M:%S %z&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename = title&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename = repalceInvalidCharInFilename(filename)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filepath = exportDir + filename + &lt;span class=&quot;string&quot;&gt;&#39;.txt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#newFile = open(unicode(filepath, &quot;utf8&quot;), &#39;w&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile = open(filepath,&lt;span class=&quot;string&quot;&gt;&#39;a+&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 根据自己需要选择去留注释,这里categores和tag用了一样的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# newFile.write(&#39;---&#39; + &#39;\n&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# newFile.write(&#39;layout: post&#39; + &#39;\n&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;title: &#39;&lt;/span&gt; + title + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;date: &#39;&lt;/span&gt; + contentDate + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# newFile.write(&#39;comments: true&#39; + &#39;\n&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;categories: [&#39;&lt;/span&gt; + categories + &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;tags: [&#39;&lt;/span&gt; + categories + &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#newFile.write(&#39;description:&#39; + title + &#39;\n&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# newFile.write(&#39;keywords: &#39; + categories + &#39;\n&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;---&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;\n\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content = content.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;).encode(&lt;span class=&quot;string&quot;&gt;&#39;gb18030&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print content&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(content)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.write(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newFile.close()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    articleUrlTitle = getPageUrlList(url)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for s in articleUrlTitle:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print s,&#39;--&#39;,articleUrlTitle[s]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#multithread download&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    threads = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; url &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; articleUrlTitle:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        patternTitle = re.compile(&lt;span class=&quot;string&quot;&gt;&#39;\r\n *(.+) *\r\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title = patternTitle.sub(&lt;span class=&quot;string&quot;&gt;r&#39;\1&#39;&lt;/span&gt;,articleUrlTitle[url])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# print &#39;title&#39;,title&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t = threading.Thread(target = download,args = (url,title))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t.start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        threads.append(t)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; threads:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        i.join()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意一下，我是直接在windows下运行生成的txt文件，所以文件时dos文件，当在linux下编辑的话会出现各种因格式问题导致的奇怪的问题，这需要自己改一下编码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#一、综述&lt;/p&gt;
&lt;p&gt;最开始的博客用的是oschina, 自我感觉小清新，支持比较多风格的编辑器，容易编辑程度比csdn的要好。后来因为csdn人气的关系，又转到csdn，不过csdn编辑确实比较虐心，再后来就在服务器上搭一个WordPress的博客，不过用起来不是很爽。几个月前支持Markdown编辑，这无疑给用github pages的用户一个福音，因为可以直接上传到自己的github博客上。&lt;br&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://enjoyhot.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://enjoyhot.github.io/tags/Markdown/"/>
    
      <category term="CSDN" scheme="http://enjoyhot.github.io/tags/CSDN/"/>
    
  </entry>
  
  <entry>
    <title>photos</title>
    <link href="http://enjoyhot.github.io/2015/03/26/myphoto/"/>
    <id>http://enjoyhot.github.io/2015/03/26/myphoto/</id>
    <published>2015-03-26T15:45:21.000Z</published>
    <updated>2017-04-02T09:32:28.860Z</updated>
    
    <content type="html">&lt;p&gt;say something show&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;say something show&lt;/p&gt;

    
    </summary>
    
      <category term="Photo" scheme="http://enjoyhot.github.io/categories/Photo/"/>
    
    
      <category term="Photo" scheme="http://enjoyhot.github.io/tags/Photo/"/>
    
  </entry>
  
  <entry>
    <title>photos</title>
    <link href="http://enjoyhot.github.io/2015/03/26/photoshow01/"/>
    <id>http://enjoyhot.github.io/2015/03/26/photoshow01/</id>
    <published>2015-03-26T15:45:21.000Z</published>
    <updated>2017-04-02T09:32:28.884Z</updated>
    
    <content type="html">&lt;p&gt;You just say something I don’t know.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;You just say something I don’t know.&lt;/p&gt;

    
    </summary>
    
      <category term="photo" scheme="http://enjoyhot.github.io/categories/photo/"/>
    
    
      <category term="photo" scheme="http://enjoyhot.github.io/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>HPC集群平台搭建概念</title>
    <link href="http://enjoyhot.github.io/2015/03/24/HPC-cluster/"/>
    <id>http://enjoyhot.github.io/2015/03/24/HPC-cluster/</id>
    <published>2015-03-24T12:23:50.000Z</published>
    <updated>2017-04-02T09:32:28.764Z</updated>
    
    <content type="html">&lt;p&gt;　　在本文之前，我建议先看完这篇文章：&lt;a href=&quot;http://www.jointforce.com.cn/page/hardware_linux.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux高性能计算集群 – Beowulf集群&lt;/a&gt;　　&lt;/p&gt;
&lt;p&gt;#一、搭建集群中可能会遇到的问题&lt;/p&gt;
&lt;p&gt;1.集群设计/布局的一大难点就是网络，各家有各家的策略，一般围绕Beowulf变型。&lt;br&gt;2.软件的部署缺乏实操调试，也不能断定这样部署是否成功以及是否优越。&lt;br&gt;3.操作系统的选型以及安装系统、所需软件（包括集群管理工具、驱动软件、能耗监控软件等）的整个流程的手动/自动化部署。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;4.每个提供硬件的对应公司几乎都推出他们自己的集群管理软件，浪潮好像没有，在HPC方面浪潮好像没有相应的开发社区，DELL和IBM这些大公司都有。&lt;br&gt;5.能耗的衡量，具体的优化方向和策略。&lt;/p&gt;
&lt;p&gt;#二、HPC概览&lt;/p&gt;
&lt;p&gt;##①总体构成&lt;br&gt;    Outside Network: 外部网络&lt;br&gt;    Master Node: 主节点&lt;br&gt;    Compute Nodes: 计算节点&lt;br&gt;    Storage: 存储器&lt;br&gt;    Computational Network: 计算网络&lt;br&gt;    Management Network: 管理网络&lt;/p&gt;
&lt;p&gt;##②大多数 HPCC 系统配有两个网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于TCP的管理网络&lt;/li&gt;
&lt;li&gt;计算网络，可以是基于 TCP 或其它协议的，通常是 InfiniBand 或 Myrinet 10G 之    类的高速网络&lt;br&gt;##③拓扑图&lt;br&gt;网上找的普遍认可的：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324151225653&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324151208655&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;这个是自己根据实际情况“臆想”的：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324151438331&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;##④所需软件组件（按安装顺序）：&lt;/p&gt;
&lt;p&gt;###1、对于安装系统：&lt;br&gt;　　集群中的每个节点（HPCC 节点文章链接）、主节点、登录节点和计算节点都需要有操作系统。操作系统可以安装在节点的硬盘驱动器上，甚至可以安装在ramdisk 上，这有时被称为“无盘”或“无状态”节点。一般说来，主节点创建所谓的“映像”，然后将其发送到计算节点上进行安装（硬盘驱动器或 ramdisk 上）。&lt;br&gt;　　系统装在内存会更快，但断电后要采取将系统拷贝到硬盘的方法重新存储起来，比较麻烦。&lt;br&gt;　　&lt;br&gt;　　&lt;strong&gt;几种安装工具的特点：&lt;/strong&gt;&lt;br&gt;　　&lt;img src=&quot;http://img.blog.csdn.net/20150324151858809&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　但是，比较有名有Rocks（比xCat安装简单）、xCat。&lt;br&gt;　　&lt;strong&gt;xCAT:&lt;/strong&gt;&lt;br&gt;a、支持自己系统独立，可以自己选择基于RHEL的最新版本系统；&lt;br&gt;b、命令行安装，需要人工编辑配置文件，安装一台之后再利用脚本进行网络安装裸机节点；&lt;br&gt;c、xCat在安装起来像一个个独立软件，如其他并行计算需要的相关软件可以通过xCat命令安装；&lt;br&gt;　　&lt;strong&gt;Rocks:&lt;/strong&gt;&lt;br&gt;a、ROCKS 基于 Red Hat 发行版，这对于大多数人是合适的，但是对于使用 SUSE 或者希望使用在 RH 6.2 发行版上创建的映像的人就不合适了，里面的软件可以选择性安装。另外，ROCKS 不是克隆解决方案；&lt;br&gt;b、之前需刻录CD，GUI界面部署，之后人工进行节点命名和节点ip的配置，安装时一台一台进行；&lt;br&gt;c、Rocks则像一个集成的包，包含工具与软件；&lt;br&gt;Rocks = CentOS + Rolls&lt;br&gt;Roll软件包包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base：基本的Rocks Cluster管理工具&lt;/li&gt;
&lt;li&gt;SGE：SUN Grid Engine，集群下作业调度&lt;/li&gt;
&lt;li&gt;HPC：为集群上的并行应用提供运行环境（MPI，PVM）&lt;/li&gt;
&lt;li&gt;area51：分析集群上文件和内核的完整性&lt;/li&gt;
&lt;li&gt;Ganglia：集群监控软件（主流hpc cluster基本都有这个）&lt;/li&gt;
&lt;li&gt;Bio：集群的生物信息学工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般而言，这两种方法只有适用性与便捷性的差异。&lt;br&gt;有一个视频课程 &lt;a href=&quot;http://edu.51cto.com/course/course_id-507.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://edu.51cto.com/course/course_id-507.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　对于操作系统的选择，调研了很多，一般用Red Hat，Centos居多，一方面是社区活跃，一方面是源码开发，资源兼容较多。&lt;br&gt;（MIC开发上基本采用Red Hat，Centos，SUSE，windows也开始有了）&lt;/p&gt;
&lt;p&gt;###2、安装驱动和开发工具。&lt;br&gt;包括IB驱动、编译器、编辑器、调试器、库等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行计算开发环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装英特尔众核平台软件堆栈(MPSS)，包含各种驱动。&lt;br&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-manycore-platform-software-stack-mpss#lx34rel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://software.intel.com/en-us/articles/intel-manycore-platform-software-stack-mpss#lx34rel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;假如用intel的编译器的话（我们应该是用intel的）：&lt;br&gt;下载安装intel parallel studio xe 2015，包含有性能分析工具、编译器、高性能库、并行编程工具等，对Xeon Phi进行相应的优化和升级。 Cilk Plus，OpenMP，TBB多线程编程技术和向量化技术在Xeon &amp;amp; Xeon Phi上都已实现了，软件开发者无需额外的移植成本。（试用30天）&lt;br&gt;&lt;a href=&quot;https://software.intel.com/en-us/intel-parallel-studio-xe/try-buy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://software.intel.com/en-us/intel-parallel-studio-xe/try-buy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;xeon phi与第三方工具是否available，参考Intel FAQ：&lt;br&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/intel-and-third-party-tools-and-libraries-available-with-support-for-intelr-xeon-phitm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://software.intel.com/en-us/articles/intel-and-third-party-tools-and-libraries-available-with-support-for-intelr-xeon-phitm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###3、配置节点信息存储系统&lt;br&gt;安装NFS、PVFS、Lustre 、Luster、GPFS、SNFS等，一般大型的HPC集群用Lustre能获得更好的性能，但不太适合小集群，小集群可以考虑用NFS和PVFS，但NFS并不是面向并行计算的，推荐用PVFS好一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于Lustre：&lt;/strong&gt;&lt;br&gt;　　一个Lustre文件系统主要包括以下四个组件：管理服务器Management Server(mgs), 元数据服务器Meta Data Target(mdt), 对象存储服务器Object Storge Target(ost) ,客户端Lustre clients(lc)。&lt;br&gt;　　它主要包括三个部分：元数据服务器MDS (Metadata Server)、对象存储服务器OSS (Object Storage Server)和客户端Client。&lt;br&gt;　　正常的启动顺序是：OST -&amp;gt; MDS -&amp;gt; CLIENT&lt;/p&gt;
&lt;p&gt;　　甲骨文产品管理负责人Bob Thome表示：“云文件系统并不是甲骨文首个基于集群文件系统的产品。甲骨文管理着Lustre项目，Lustre更适合于拥有上千台服务器的大规模HPC（高性能计算）部署。云文件系统则更适合于25个节点数左右的小规模部署，尽管Lustre已经通过了多达100个节点的测试。Lustre也可以实现很多相同的功能，但使用门槛较高，安装和配置较为繁琐，并不适合于小规模部署。”&lt;br&gt;　　关于Lustre的博文：&lt;a href=&quot;http://www.cnblogs.com/jpa2/category/384788.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/jpa2/category/384788.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PVFS存在以下不足：&lt;/strong&gt;&lt;br&gt;1）单一管理节点。上面说到过PVFS中只有一个管理节点来管理元数据，当集群系统达到一定的规模之后，管理节点将可能出现过度繁忙的情况，这时管理节点将成为系统瓶颈。&lt;br&gt;2）对数据的存储缺乏容错机制。当某一I/O节点无法工作时，上面的数据将出现不可用的情况。&lt;br&gt;3）静态配置。对PVFS的配置只能在启动前进行，一旦系统运行则不可再更改原先的配置。&lt;/p&gt;
&lt;p&gt;###4、集群管理工具（考虑是否集成了一些组件）&lt;br&gt;　　集群管理工具 (CMT)，它的职能是管理集群。它有多个功能，有的是可选功能。而必须具备的功能包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护计算节点清单（即集群中包括的节点）。只需通过简单如 /etc/hosts 的，就能复制或通过本地 DNS 发送至每个计算节点&lt;/li&gt;
&lt;li&gt;创建、管理映像或安装在计算节点上的数据包集&lt;/li&gt;
&lt;li&gt;发送映像或数据包到计算节点（一般通过 PXE ）&lt;/li&gt;
&lt;li&gt;执行对计算节点的基本监控（例如，节点工作情况？什么节点发生起落？）&lt;/li&gt;
&lt;li&gt;计算节点电源控制（不是硬性要求，但是强烈推荐）。即远程开启/关闭节点，此功能可以通过各种方法实现，有的方法需要使用增加其他硬件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这个功能清单对于有集群经验的人来说显得太简短，但清单所载功能是 CMT真正的核心。具备其他功能也不错，但对集群来说并不是必不可少的。&lt;/p&gt;
&lt;p&gt;　　CMT 包括 Platform OCS、Clustercorp ROCKS+、Microsoft Windows CCS 和平台管理器 (Platform Manager) 、Mon等。&lt;/p&gt;
&lt;p&gt;###5、可选组件：&lt;br&gt;　　集群所需的工具并不多，但有了这些就能实现集群的基本运行。不过，它只能满足 1 个用户或 2 至 3 个用户的需要，此外，要实现全面控制和掌握集群的运行情况。要安装一些可选组件，从技术上虽然是可选项，但是没有这些工具，集群就不具备生产能力。&lt;br&gt;有一些组件可以添加到 CMT 或 CMI 上层。一个有数年管理多个集群经验的人说的，强烈建议您郑重考虑使用以下附加组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更加广泛的监控工具，包括集群状态图形视图，例如Ganglia（链接- &lt;a href=&quot;http://ganglia.info/）、Cacti（链接&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ganglia.info/）、Cacti（链接&lt;/a&gt; - &lt;a href=&quot;http://www.cacti.net/）和&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cacti.net/）和&lt;/a&gt; Nagios（链接 -&lt;a href=&quot;http://www.nagios.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nagios.org/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;报告工具，允许您创建关于集群运行情况的报告&lt;/li&gt;
&lt;li&gt;用户帐户管理工具（允许您在整个集群上创建用户帐号、允许用户设置密码，然后将其传播到集群的所有节点上，允许无密码登录节点，这对于运行 MPI 应用程序是必需的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个理论上可选，但值得强烈推荐的组件——任务调度器（也被称为资源管理器）任务调度器是一个允许用户提交执行任务、但不参与任务运行的排队系统。任务调度器把提交的任务排成队列，等到资源（即节点）可用时，就开始运行。任务调度器包括：Platform LSF、PBS-Pro 和 MOAB 等。&lt;/p&gt;
&lt;p&gt;###6、测试&lt;br&gt;略&lt;/p&gt;
&lt;p&gt;#三、参考链接：&lt;br&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cluster1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-cluster1/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://zh.community.dell.com/techcenter/w/techcenter_wiki/50&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.community.dell.com/techcenter/w/techcenter_wiki/50&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.hpcblog.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.hpcblog.com.cn/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;附上一张高清MIC图：&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324154126054&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　在本文之前，我建议先看完这篇文章：&lt;a href=&quot;http://www.jointforce.com.cn/page/hardware_linux.html&quot;&gt;Linux高性能计算集群 – Beowulf集群&lt;/a&gt;　　&lt;/p&gt;
&lt;p&gt;#一、搭建集群中可能会遇到的问题&lt;/p&gt;
&lt;p&gt;1.集群设计/布局的一大难点就是网络，各家有各家的策略，一般围绕Beowulf变型。&lt;br&gt;2.软件的部署缺乏实操调试，也不能断定这样部署是否成功以及是否优越。&lt;br&gt;3.操作系统的选型以及安装系统、所需软件（包括集群管理工具、驱动软件、能耗监控软件等）的整个流程的手动/自动化部署。&lt;br&gt;
    
    </summary>
    
      <category term="HPC" scheme="http://enjoyhot.github.io/categories/HPC/"/>
    
    
      <category term="HPC" scheme="http://enjoyhot.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>HPC性能测试</title>
    <link href="http://enjoyhot.github.io/2015/03/24/HPC-benchmark/"/>
    <id>http://enjoyhot.github.io/2015/03/24/HPC-benchmark/</id>
    <published>2015-03-24T06:43:00.000Z</published>
    <updated>2017-04-02T09:32:28.764Z</updated>
    
    <content type="html">&lt;p&gt;#一、介绍&lt;/p&gt;
&lt;p&gt;　　说到高性能计算，一般都是利用搭建集群配合加速卡做并行计算实现。但用相同的硬件实现更快的方法，那就是做测试了。比较有名的就是Linpack测试了，Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark，在高性能领域，就是利用其中的HPL测试进行测试。下面摘一段百科上的解释:&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark。通过利用高性能计算机，用高斯消元法求解N元一次稠密线性代数方程组的测试，评价高性能计算机的浮点性能。&lt;br&gt;　　Linpack测试包括三类，Linpack100、Linpack1000和HPL。Linpack100求解规模为100阶的稠密线性代数方程组，它只允许采用编译优化选项进行优化，不得更改代码，甚至代码中的注释也不得修改。Linpack1000要求求解规模为1000阶的线性代数方程组，达到指定的精度要求，可以在不改变计算量的前提下做算法和代码上做优化。HPL即High Performance Linpack，也叫高度并行计算基准测试，它对数组大小N没有限制，求解问题的规模可以改变，除基本算法（计算量）不可改变外，可以采用其它任何优化方法。前两种测试运行规模较小，已不是很适合现代计算机的发展，因此现在使用较多的测试标准为HPL，而且阶次N也是linpack测试必须指明的参数。&lt;br&gt;　　HPL是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 &lt;em&gt; N^3－2&lt;/em&gt;N^2)。因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 &lt;em&gt; N^3－2&lt;/em&gt;N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出。&lt;br&gt;　　&lt;br&gt;计算峰值：&lt;br&gt;　　随着产品硬件的不断的升级，整个的计算能力也以数量级的速度提升。衡量计算机性能的一个重要指标就是计算峰值，例如浮点计算峰值，它是指计算机每秒钟能完成的浮点计算最大次数。包括理论浮点峰值和实测浮点峰值：&lt;br&gt;　　理论浮点峰值是该计算机理论上能达到的每秒钟能完成浮点计算最大次数，它主要是由CPU的主频决定的，&lt;br&gt;理论浮点峰值=CPU主频×CPU每个时钟周期执行浮点运算的次数×系统中CPU核心数目&lt;br&gt;　　实测浮点峰值是指Linpack测试值，也就是说在这台机器上运行Linpack测试程序，通过各种调优方法得到的最优的测试结果。实际上在实际程序运行过程中，几乎不可能达到实测浮点峰值，更不用说达到理论浮点峰值了。这两个值只是作为衡量机器性能的一个指标，用来表明机器处理能力的一个标尺和潜能的度量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　此次参加一个高性能的比赛，虽然做的是平台搭建部分，但对此也有些了解。也了解了一下HPCC测试和NAMD测试，下面主要分这两部分来说一下。&lt;/p&gt;
&lt;p&gt;#二、正文&lt;/p&gt;
&lt;h3 id=&quot;1、HPCC&quot;&gt;&lt;a href=&quot;#1、HPCC&quot; class=&quot;headerlink&quot; title=&quot;1、HPCC&quot;&gt;&lt;/a&gt;1、HPCC&lt;/h3&gt;&lt;p&gt; 　　HPCC 全称 HPC Chanllenge Benchmark&lt;/p&gt;
&lt;p&gt;　　Benchmark 是指一组用来评估硬件或者软件相关性能的基准测试程序&lt;/p&gt;
&lt;p&gt;　　HPC Chanllenge Benchmark 由一组benchmark组成，共计7个，分别测试了系统7个方面的性能，这7个分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HPL&lt;/li&gt;
&lt;li&gt;stream&lt;/li&gt;
&lt;li&gt;Random Access&lt;/li&gt;
&lt;li&gt;PTRANS,&lt;/li&gt;
&lt;li&gt;Latency/Bandwidth&lt;/li&gt;
&lt;li&gt;FFT&lt;/li&gt;
&lt;li&gt;DGEMM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;stream&lt;/strong&gt;：测试内存带宽&lt;br&gt;内存看作是内存控制器与CPU之间的桥梁与仓库。内存的容量决定“仓库”的大小，而内存的带宽决定“桥梁”的宽窄&lt;br&gt;&lt;strong&gt;Random Access&lt;/strong&gt;：测试内存刷新的速率（随机存储中电容器需要刷新）&lt;br&gt;&lt;strong&gt;PTRANS&lt;/strong&gt;：通过多处理器结构中两两之间的通信，来衡量在整个网络的通信能力&lt;br&gt;&lt;strong&gt;Latency/Bandwidth&lt;/strong&gt;：测试延时与带宽&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latency：8 byte 数据从一个节点到另一个节点所需时间&lt;/li&gt;
&lt;li&gt;Bandwidth：节点间网络通信的带宽&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HPL&lt;/strong&gt;：测试系统在解线性方程组时进行浮点运算的性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮点运算：超级计算机应用的场景主要是在科学计算，经常涉及矩阵运算、各种数值模拟等。&lt;/li&gt;
&lt;li&gt;超级计算机经常以FLOPS（每秒浮点运算次数）去衡量计算能力&lt;/li&gt;
&lt;li&gt;HPCC里有3种benchmark是测试浮点计算性能的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;FFT&lt;/strong&gt;：涉及到双精度一维离散傅里叶变换时，浮点运算的速度&lt;br&gt;&lt;strong&gt;DGEMM&lt;/strong&gt;：在做双精度矩阵乘法时，浮点运算的速度&lt;/p&gt;
&lt;p&gt;HPCC的下载地址见：&lt;a href=&quot;http://icl.cs.utk.edu/hpcc/software/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这个软件13年8月后就没更新了，网上查阅了很多资料，发现使用的人好像也不多，对于高性能计算，大多都是HPL的文章和测试。要想使用好这个软件，需要研读其源代码。&lt;br&gt;　　其中的安装使用方法可参照网站的&lt;strong&gt;FAQ&lt;/strong&gt;以及软件中的&lt;strong&gt;README.html&lt;/strong&gt;&lt;br&gt;　　编译之前，需要下载好相关的库，包括MPI（mpich，mpich2，mvapich，openmpi，platform_mpi，hpmpi……）、MKL/BLAS/GotoBLAS2……、C语言编译器等，前两者集群一般需要自己去找对应的软件，详细配置请自行上网搜一下，和Linpack基本一样。&lt;/p&gt;
&lt;p&gt;###2、NAMD测试&lt;/p&gt;
&lt;p&gt;　　NAMD是一个与分子动力学有关，用来高仿真大型生物分子系统的程序。即生物分子建模程序。&lt;br&gt;　　现提供两个工作负载apoa1, f1atpase&lt;br&gt;　　它们可以从 &lt;a href=&quot;http://www.ks.uiuc.edu/Research/namd/utilities/f1atpase.tar.gz和http://www.ks.uiuc.edu/Research/namd/utilities/apoa1.tar.gz下载。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ks.uiuc.edu/Research/namd/utilities/f1atpase.tar.gz和http://www.ks.uiuc.edu/Research/namd/utilities/apoa1.tar.gz下载。&lt;/a&gt;
　　&lt;/p&gt;
&lt;p&gt;至于性能的话，且看图：&lt;br&gt;　　&lt;img src=&quot;http://img.blog.csdn.net/20150324144222556&quot; alt=&quot;http://www.ks.uiuc.edu/Research/namd/performance.html&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&quot;http://www.ks.uiuc.edu/Research/namd/performance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAMD 2.8 在天津超算天河-1A上的测试结果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表1 每节点不同进程数以及使用不同节点数的NAMD性能（days/ns）比较&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324144513425&quot; alt=&quot;数据&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324144634870&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　结论：为了在天河上达到性能最优，最佳的方案是使用GPU，并且每个节点开6个进程。参照：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_a43b3cf2010157pz.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#一、介绍&lt;/p&gt;
&lt;p&gt;　　说到高性能计算，一般都是利用搭建集群配合加速卡做并行计算实现。但用相同的硬件实现更快的方法，那就是做测试了。比较有名的就是Linpack测试了，Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark，在高性能领域，就是利用其中的HPL测试进行测试。下面摘一段百科上的解释:&lt;br&gt;
    
    </summary>
    
      <category term="HPC" scheme="http://enjoyhot.github.io/categories/HPC/"/>
    
    
      <category term="HPC" scheme="http://enjoyhot.github.io/tags/HPC/"/>
    
      <category term="benchmark" scheme="http://enjoyhot.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>HPC性能测试</title>
    <link href="http://enjoyhot.github.io/2015/03/24/hpc-benchmark/"/>
    <id>http://enjoyhot.github.io/2015/03/24/hpc-benchmark/</id>
    <published>2015-03-24T06:43:00.000Z</published>
    <updated>2017-04-02T08:04:19.228Z</updated>
    
    <content type="html">&lt;p&gt;#一、介绍&lt;/p&gt;
&lt;p&gt;　　说到高性能计算，一般都是利用搭建集群配合加速卡做并行计算实现。但用相同的硬件实现更快的方法，那就是做测试了。比较有名的就是Linpack测试了，Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark，在高性能领域，就是利用其中的HPL测试进行测试。下面摘一段百科上的解释:&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark。通过利用高性能计算机，用高斯消元法求解N元一次稠密线性代数方程组的测试，评价高性能计算机的浮点性能。&lt;br&gt;　　Linpack测试包括三类，Linpack100、Linpack1000和HPL。Linpack100求解规模为100阶的稠密线性代数方程组，它只允许采用编译优化选项进行优化，不得更改代码，甚至代码中的注释也不得修改。Linpack1000要求求解规模为1000阶的线性代数方程组，达到指定的精度要求，可以在不改变计算量的前提下做算法和代码上做优化。HPL即High Performance Linpack，也叫高度并行计算基准测试，它对数组大小N没有限制，求解问题的规模可以改变，除基本算法（计算量）不可改变外，可以采用其它任何优化方法。前两种测试运行规模较小，已不是很适合现代计算机的发展，因此现在使用较多的测试标准为HPL，而且阶次N也是linpack测试必须指明的参数。&lt;br&gt;　　HPL是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 &lt;em&gt; N^3－2&lt;/em&gt;N^2)。因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 &lt;em&gt; N^3－2&lt;/em&gt;N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出。&lt;br&gt;　　&lt;br&gt;计算峰值：&lt;br&gt;　　随着产品硬件的不断的升级，整个的计算能力也以数量级的速度提升。衡量计算机性能的一个重要指标就是计算峰值，例如浮点计算峰值，它是指计算机每秒钟能完成的浮点计算最大次数。包括理论浮点峰值和实测浮点峰值：&lt;br&gt;　　理论浮点峰值是该计算机理论上能达到的每秒钟能完成浮点计算最大次数，它主要是由CPU的主频决定的，&lt;br&gt;理论浮点峰值=CPU主频×CPU每个时钟周期执行浮点运算的次数×系统中CPU核心数目&lt;br&gt;　　实测浮点峰值是指Linpack测试值，也就是说在这台机器上运行Linpack测试程序，通过各种调优方法得到的最优的测试结果。实际上在实际程序运行过程中，几乎不可能达到实测浮点峰值，更不用说达到理论浮点峰值了。这两个值只是作为衡量机器性能的一个指标，用来表明机器处理能力的一个标尺和潜能的度量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　此次参加一个高性能的比赛，虽然做的是平台搭建部分，但对此也有些了解。也了解了一下HPCC测试和NAMD测试，下面主要分这两部分来说一下。&lt;/p&gt;
&lt;p&gt;#二、正文&lt;/p&gt;
&lt;h3 id=&quot;1、HPCC&quot;&gt;&lt;a href=&quot;#1、HPCC&quot; class=&quot;headerlink&quot; title=&quot;1、HPCC&quot;&gt;&lt;/a&gt;1、HPCC&lt;/h3&gt;&lt;p&gt; 　　HPCC 全称 HPC Chanllenge Benchmark&lt;/p&gt;
&lt;p&gt;　　Benchmark 是指一组用来评估硬件或者软件相关性能的基准测试程序&lt;/p&gt;
&lt;p&gt;　　HPC Chanllenge Benchmark 由一组benchmark组成，共计7个，分别测试了系统7个方面的性能，这7个分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HPL &lt;/li&gt;
&lt;li&gt;stream&lt;/li&gt;
&lt;li&gt;Random Access&lt;/li&gt;
&lt;li&gt;PTRANS,&lt;/li&gt;
&lt;li&gt;Latency/Bandwidth&lt;/li&gt;
&lt;li&gt;FFT&lt;/li&gt;
&lt;li&gt;DGEMM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;stream&lt;/strong&gt;：测试内存带宽&lt;br&gt;内存看作是内存控制器与CPU之间的桥梁与仓库。内存的容量决定“仓库”的大小，而内存的带宽决定“桥梁”的宽窄&lt;br&gt;&lt;strong&gt;Random Access&lt;/strong&gt;：测试内存刷新的速率（随机存储中电容器需要刷新）&lt;br&gt;&lt;strong&gt;PTRANS&lt;/strong&gt;：通过多处理器结构中两两之间的通信，来衡量在整个网络的通信能力&lt;br&gt;&lt;strong&gt;Latency/Bandwidth&lt;/strong&gt;：测试延时与带宽&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latency：8 byte 数据从一个节点到另一个节点所需时间&lt;/li&gt;
&lt;li&gt;Bandwidth：节点间网络通信的带宽&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HPL&lt;/strong&gt;：测试系统在解线性方程组时进行浮点运算的性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮点运算：超级计算机应用的场景主要是在科学计算，经常涉及矩阵运算、各种数值模拟等。&lt;/li&gt;
&lt;li&gt;超级计算机经常以FLOPS（每秒浮点运算次数）去衡量计算能力&lt;/li&gt;
&lt;li&gt;HPCC里有3种benchmark是测试浮点计算性能的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;FFT&lt;/strong&gt;：涉及到双精度一维离散傅里叶变换时，浮点运算的速度&lt;br&gt;&lt;strong&gt;DGEMM&lt;/strong&gt;：在做双精度矩阵乘法时，浮点运算的速度&lt;/p&gt;
&lt;p&gt;HPCC的下载地址见：&lt;a href=&quot;http://icl.cs.utk.edu/hpcc/software/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这个软件13年8月后就没更新了，网上查阅了很多资料，发现使用的人好像也不多，对于高性能计算，大多都是HPL的文章和测试。要想使用好这个软件，需要研读其源代码。&lt;br&gt;　　其中的安装使用方法可参照网站的&lt;strong&gt;FAQ&lt;/strong&gt;以及软件中的&lt;strong&gt;README.html&lt;/strong&gt;&lt;br&gt;　　编译之前，需要下载好相关的库，包括MPI（mpich，mpich2，mvapich，openmpi，platform_mpi，hpmpi……）、MKL/BLAS/GotoBLAS2……、C语言编译器等，前两者集群一般需要自己去找对应的软件，详细配置请自行上网搜一下，和Linpack基本一样。&lt;/p&gt;
&lt;p&gt;###2、NAMD测试&lt;/p&gt;
&lt;p&gt;　　NAMD是一个与分子动力学有关，用来高仿真大型生物分子系统的程序。即生物分子建模程序。&lt;br&gt;　　现提供两个工作负载apoa1, f1atpase&lt;br&gt;　　它们可以从 &lt;a href=&quot;http://www.ks.uiuc.edu/Research/namd/utilities/f1atpase.tar.gz和http://www.ks.uiuc.edu/Research/namd/utilities/apoa1.tar.gz下载。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ks.uiuc.edu/Research/namd/utilities/f1atpase.tar.gz和http://www.ks.uiuc.edu/Research/namd/utilities/apoa1.tar.gz下载。&lt;/a&gt;
　　&lt;/p&gt;
&lt;p&gt;至于性能的话，且看图：&lt;br&gt;　　&lt;img src=&quot;http://img.blog.csdn.net/20150324144222556&quot; alt=&quot;http://www.ks.uiuc.edu/Research/namd/performance.html&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&quot;http://www.ks.uiuc.edu/Research/namd/performance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAMD 2.8 在天津超算天河-1A上的测试结果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表1 每节点不同进程数以及使用不同节点数的NAMD性能（days/ns）比较&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324144513425&quot; alt=&quot;数据&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150324144634870&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　结论：为了在天河上达到性能最优，最佳的方案是使用GPU，并且每个节点开6个进程。参照：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_a43b3cf2010157pz.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#一、介绍&lt;/p&gt;
&lt;p&gt;　　说到高性能计算，一般都是利用搭建集群配合加速卡做并行计算实现。但用相同的硬件实现更快的方法，那就是做测试了。比较有名的就是Linpack测试了，Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark，在高性能领域，就是利用其中的HPL测试进行测试。下面摘一段百科上的解释:&lt;br&gt;
    
    </summary>
    
      <category term="HPC" scheme="http://enjoyhot.github.io/categories/HPC/"/>
    
    
      <category term="benchmark" scheme="http://enjoyhot.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>学习感悟</title>
    <link href="http://enjoyhot.github.io/2015/03/19/study-thinking-20150319/"/>
    <id>http://enjoyhot.github.io/2015/03/19/study-thinking-20150319/</id>
    <published>2015-03-19T05:42:00.000Z</published>
    <updated>2017-04-02T09:32:28.960Z</updated>
    
    <content type="html">&lt;h1 id=&quot;社会篇&quot;&gt;&lt;a href=&quot;#社会篇&quot; class=&quot;headerlink&quot; title=&quot;社会篇&quot;&gt;&lt;/a&gt;社会篇&lt;/h1&gt;&lt;p&gt;   走过2014，看得很多是互联网如何在颠覆各个行业。以下说的都是感悟，可能有些无序，多多包含。&lt;/p&gt;
&lt;p&gt;   无论是做科研也好，投入社会工作也罢，在做以互联网技术为核心的技术学习时，都要有一个目标，做出为社会认可的有价值的“产品”，并间接体现为金钱财富。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;   其实，互联网从访问互联网的用户中赚钱，流量即是渠道。曾听过一句话——“有流量就能赚钱”。确实，在各个行业环环相扣的时候，利用“代理”的作用能把流量转化为金钱，也由于这个原因，才使那么多网民孜孜不倦地以合法或不合法的手段游走于因特网各个角落。&lt;/p&gt;
&lt;p&gt;   然而，怎样最高效率地利用流量，叫要看个人的素养，假如我们将单纯上网的网民比作现实中普通的消费者，那么单纯利用流量赚钱可以比作打工者，而管理某个访问点的可以比作房东，那么房地产，设计师又如何？那需要有强大编程功底的各个阶层的创作者来担任了。从做服务，到做标准，互联网是另一个世界，虚拟而却又像现实生活中那样分工明确，生活着。&lt;/p&gt;
&lt;p&gt;   在这里，我相信都想往高处走，做创作者。但这里我有个发现，能做到标准的少之又少，多数成功者，走的却是先往高处走，当走到一定规模后，市场足够大，再往低处走，做稳定发展的打算。之后有余力再在高处不断试探，不断阶梯式上升，建造更高的高峰。&lt;/p&gt;
&lt;p&gt;   14年相比13年又可以称为互联网的爆炸阶段，不管是从从业的数量来看还是从创业的数量来看。一切的发展归根到底都是为了服务人类生活，往更便捷更智能更廉价发展。&lt;/p&gt;
&lt;p&gt;   因此，才涌现了更方便的产品，更智能的算法，更高速的计算。&lt;/p&gt;
&lt;p&gt;   #热点篇&lt;/p&gt;
&lt;p&gt;   更方便的产品，更智能的算法，更高速的计算，既是相对分开，却又是一脉相承，任何一个领域都可以颠覆另一个领域，当然，最终体现在产品上， 因而产品领域是最活跃的，门槛相对低的情况下又与金钱结合得最为紧密。而超算方面一直以来都比较冷门，毕竟门槛高，又与硬件运算最为相关&lt;/p&gt;
&lt;p&gt;   说到产品，苹果、谷歌、Facebook，产品之王|搜索之王|社交之王。&lt;/p&gt;
&lt;p&gt;   说到算法，目前人工智能领域的机器学习，深度学习，还有相关的大数据，云计算等。&lt;/p&gt;
&lt;p&gt;   说到计算，那就是超算，高性能计算，单台配上GPU和MIC可以提升计算能力，或者直接在集群上并行。&lt;/p&gt;
&lt;p&gt;   这三种内容在以后的博客应该都会多多少少体现。&lt;/p&gt;
&lt;p&gt;   #学习篇&lt;/p&gt;
&lt;p&gt;   慢慢啃，从实验到产品，是一个漫长的过程，但所有的收获，都是从test开始的，或许从产品着手不需要多高的理论积累，在这个风口也完全有可能飞得老高，所以才一家家公司冒出来，或者一些资深程序员直接跳出来创业。说实在，最后能将厚积理论勃发在产品的，互联网大公司才做得最好，毕竟资金人力都全了。小公司或者突然强势冒出来，大有盖过大公司风头之势，但大多昙花一现、干不过大公司，最后被收购也不是少例。虽说这样足够混迹互联网圈，但能主导一个潮流，不算是人生的一大乐事吗？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;社会篇&quot;&gt;&lt;a href=&quot;#社会篇&quot; class=&quot;headerlink&quot; title=&quot;社会篇&quot;&gt;&lt;/a&gt;社会篇&lt;/h1&gt;&lt;p&gt;   走过2014，看得很多是互联网如何在颠覆各个行业。以下说的都是感悟，可能有些无序，多多包含。&lt;/p&gt;
&lt;p&gt;   无论是做科研也好，投入社会工作也罢，在做以互联网技术为核心的技术学习时，都要有一个目标，做出为社会认可的有价值的“产品”，并间接体现为金钱财富。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://enjoyhot.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://enjoyhot.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>【machine learning】KNN算法        </title>
    <link href="http://enjoyhot.github.io/2015/02/25/machinelearning-KNN/"/>
    <id>http://enjoyhot.github.io/2015/02/25/machinelearning-KNN/</id>
    <published>2015-02-25T08:04:00.000Z</published>
    <updated>2017-04-02T09:32:28.804Z</updated>
    
    <content type="html">&lt;p&gt;适逢学习机器学习基础知识，就将书中内容读读记记，本博文代码参考书本Machine Learning in Action（《机器学习实战》）。&lt;/p&gt;
&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;kNN算法又称为k近邻分类(k-nearest neighbor classification)算法。&lt;/p&gt;
&lt;p&gt;kNN算法则是从训练集中找到和新数据最接近的k条记录，然后根据他们的主要分类来决定新数据的类别。该算法涉及3个主要因素：训练集、距离或相似的衡量、k的大小。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;二、算法要点&quot;&gt;&lt;a href=&quot;#二、算法要点&quot; class=&quot;headerlink&quot; title=&quot;二、算法要点&quot;&gt;&lt;/a&gt;二、算法要点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、指导思想&lt;/strong&gt;&lt;br&gt;kNN算法的指导思想是“近朱者赤，近墨者黑”，由你的邻居来推断出你的类别。&lt;/p&gt;
&lt;p&gt;计算步骤如下：&lt;br&gt;1）算距离：给定测试对象，计算它与训练集中的每个对象的距离&lt;br&gt;2）找邻居：圈定距离最近的k个训练对象，作为测试对象的近邻&lt;br&gt;3）做分类：根据这k个近邻归属的主要类别，来对测试对象分类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、距离或相似度的衡量&lt;/strong&gt;&lt;br&gt;什么是合适的距离衡量？距离越近应该意味着这两个点属于一个分类的可能性越大。&lt;br&gt;距离衡量包括欧式距离、夹角余弦等。&lt;br&gt;对于文本分类来说，使用余弦(cosine)来计算相似度就比欧式(Euclidean)距离更合适。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、类别的判定&lt;/strong&gt;&lt;br&gt;投票决定：少数服从多数，近邻中哪个类别的点最多就分为该类，属于以频率为标准。&lt;br&gt;加权投票法：根据距离的远近，对近邻的投票进行加权，距离越近则权重越大（权重为距离平方的倒数），属于以量化为标准。&lt;/p&gt;
&lt;h1 id=&quot;三、优缺点&quot;&gt;&lt;a href=&quot;#三、优缺点&quot; class=&quot;headerlink&quot; title=&quot;三、优缺点&quot;&gt;&lt;/a&gt;三、优缺点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、优点&lt;/strong&gt;&lt;br&gt;简单，易于理解，易于实现，无需估计参数，无需训练&lt;br&gt;适合对稀有事件进行分类（例如当流失率很低时，比如低于0.5%，构造流失预测模型）&lt;br&gt;特别适合于多分类问题(multi-modal,对象具有多个类别标签)，例如根据基因特征来判断其功能分类，kNN比SVM的表现要好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、缺点&lt;/strong&gt;&lt;br&gt;懒惰算法，对测试样本分类时的计算量大，内存开销大，评分慢&lt;br&gt;可解释性较差，无法给出决策树那样的规则。&lt;/p&gt;
&lt;h1 id=&quot;四、利用KNN进行手写识别&quot;&gt;&lt;a href=&quot;#四、利用KNN进行手写识别&quot; class=&quot;headerlink&quot; title=&quot;四、利用KNN进行手写识别&quot;&gt;&lt;/a&gt;四、利用KNN进行手写识别&lt;/h1&gt;&lt;p&gt;假如存在训练数据，都是二值得灰度图，来源于手写面板的采集图像数据。如下表示数字‘0’，所在文件夹下包括表示0~9的文件，文件夹命名A_B.txt,A表示真实数字，B表示该数字的第B个样本（一般数据越多有有利于接近预测值）&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150225162324294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt; 在另一个文件夹中，也存在同样命名的数据文件，用于检验有监督学习下的准确率，我们称为测试数据。&lt;br&gt;在代码中，我们需要三个函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def classify0(inX, dataSet, labels, k)——用于对输入单个样本inX进行分类，dataSet为训练数据，labels为训练数据的类别，K为近邻范围&lt;br&gt;def img2vector(filename)——将文件filename中的数据规格由32X32转换为1X1024的向量&lt;br&gt;def handwritingClassTest()——利用测试数据进行测试，得出错误率&lt;br&gt;我这里只用了0~9分别20个训练数据而已，提高速度。需要源代码可以到机器学习实战的配套代码中取&lt;br&gt;  &lt;a href=&quot;http://vdisk.weibo.com/s/uEZesAafcjQgx?sudaref=www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vdisk.weibo.com/s/uEZesAafcjQgx?sudaref=www.baidu.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码中用到了numpy库，numpy库用在数据量大的计算较高效&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;numpy用法小抄：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;tile([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;tile([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个是矩阵A&lt;br&gt;第二个参数是要 只有一个数字时，表示 对 A中元素重复的次数&lt;br&gt;两个参数时（x， y） y表示对A中元素重复的次数， x表示 对前面的操作执行x次。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b= np.arange(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;).reshape(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [ &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [ &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b.sum(axis=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 计算每一列的和，注意理解轴的含义，参考数组的第一篇文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b.min(axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 获取每一行的最小值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b.cumsum(axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 计算每一行的累积和&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [ &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [ &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;]])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要用到再另外写博客进行补充。&lt;br&gt;KNN.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#! /usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; operator&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; listdir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;classify0&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(inX, dataSet, labels, k)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#inX------[x,x,x,x]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#dataSet------array([[x,x,x,x],[x,x,x,x]])&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#labels------[x,x]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#k------n&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSetSize = dataSet.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    diffMat = tile(inX, (dataSetSize,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) - dataSet&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sqDiffMat = diffMat**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sqDistances = sqDiffMat.sum(axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    distances = sqDistances**&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sortedDistIndicies = distances.argsort()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    classCount=&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(k):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        voteIlabel = labels[sortedDistIndicies[i]]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        classCount[voteIlabel] = classCount.get(voteIlabel,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#将字典按value值大小降序排序,结果为二维列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sortedClassCount[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;img2vector&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    returnVect = zeros((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fr = open(filename,&lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lineStr = fr.readline()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            returnVect[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*i+j] = int(lineStr[j])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnVect&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trainFile = &lt;span class=&quot;string&quot;&gt;&#39;F:\\python\\pyproject\\ML\\codes\\machinelearninginaction\\Ch02\\training20\\&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;testFile = &lt;span class=&quot;string&quot;&gt;&#39;F:\\python\\pyproject\\ML\\codes\\machinelearninginaction\\Ch02\\testDigits\\&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handwritingClassTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hwLabels = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    trainingFileList = listdir(trainFile)           &lt;span class=&quot;comment&quot;&gt;#load the training set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    m = len(trainingFileList)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    trainingMat = zeros((m,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(m):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fileNameStr = trainingFileList[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fileStr = fileNameStr.split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]     &lt;span class=&quot;comment&quot;&gt;#take off .txt&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        classNumStr = int(fileStr.split(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hwLabels.append(classNumStr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path = trainFile + &lt;span class=&quot;string&quot;&gt;&#39;%s&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        trainingMat[i,:] = img2vector(path % fileNameStr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    testFileList = listdir(testFile)        &lt;span class=&quot;comment&quot;&gt;#iterate through the test set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    errorCount = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mTest = len(testFileList)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(mTest):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fileNameStr = testFileList[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fileStr = fileNameStr.split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]     &lt;span class=&quot;comment&quot;&gt;#take off .txt&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        classNumStr = int(fileStr.split(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path = testFile + &lt;span class=&quot;string&quot;&gt;&#39;%s&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vectorUnderTest = img2vector(path % fileNameStr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;the classifier came back with: %d, the real answer is: %d&quot;&lt;/span&gt; % (classifierResult, classNumStr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (classifierResult != classNumStr): errorCount += &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\nthe total number of errors is: %d&quot;&lt;/span&gt; % errorCount&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\nthe total error rate is: %f&quot;&lt;/span&gt; % (errorCount/float(mTest))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 再在test.py中调用KNN.handwritingClassTest()，则程序开始运行&lt;/p&gt;
&lt;p&gt;  test.py&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#! /usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; KNN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;KNN.handwritingClassTest()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 可看到错误率10.68%，挺高的，增加训练数据量就应该会减小一些。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150225165135118?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;适逢学习机器学习基础知识，就将书中内容读读记记，本博文代码参考书本Machine Learning in Action（《机器学习实战》）。&lt;/p&gt;
&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;kNN算法又称为k近邻分类(k-nearest neighbor classification)算法。&lt;/p&gt;
&lt;p&gt;kNN算法则是从训练集中找到和新数据最接近的k条记录，然后根据他们的主要分类来决定新数据的类别。该算法涉及3个主要因素：训练集、距离或相似的衡量、k的大小。&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/tags/Machine-Learning/"/>
    
      <category term="Classifier" scheme="http://enjoyhot.github.io/tags/Classifier/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫框架scrapy介绍及应用——抓取新浪新闻的标题内容评论        </title>
    <link href="http://enjoyhot.github.io/2015/01/21/python-scrapy/"/>
    <id>http://enjoyhot.github.io/2015/01/21/python-scrapy/</id>
    <published>2015-01-21T07:12:00.000Z</published>
    <updated>2017-04-02T09:32:28.940Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、综述&quot;&gt;&lt;a href=&quot;#一、综述&quot; class=&quot;headerlink&quot; title=&quot;一、综述&quot;&gt;&lt;/a&gt;一、综述&lt;/h1&gt;&lt;p&gt;  开始这篇博文之前，调研了相关的爬虫方法，简单罗列冰山一角。&lt;/p&gt;
&lt;p&gt;  综述：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.crifan.com/summary_about_flow_process_of_fetch_webpage_simulate_login_website_and_some_notice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.crifan.com/summary_about_flow_process_of_fetch_webpage_simulate_login_website_and_some_notice/&lt;/a&gt;&lt;/p&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;  手动编写爬虫，httpclient是常用工具。常见的请求方式有httpget和httppost&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mr_tank_/article/details/17454315&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/mr_tank_/article/details/17454315&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/chszs/article/details/16854747&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/chszs/article/details/16854747&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yeetrack.com/?p=779&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.yeetrack.com/?p=779&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  这个教程很全面。供参考和备查&lt;/p&gt;
&lt;p&gt;  htmlunit&lt;/p&gt;
&lt;p&gt;  httpclient 对js 的支持比较差，有时候需要使用htmlunit 或者selenium。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/13/1229/14/14875906_340995211.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/13/1229/14/14875906_340995211.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/strawbingo/article/details/5768421&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/strawbingo/article/details/5768421&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/microsoftmvp/p/3716750.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/microsoftmvp/p/3716750.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 抽取相关&lt;br&gt;当爬取了html 后，需要去除噪声广告，抽取有用的信息。jsoup 和tika 是非常强大的工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsoup.org/cookbook/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jsoup.org/cookbook/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://summerbell.iteye.com/blog/565922&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://summerbell.iteye.com/blog/565922&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  github开源爬虫库&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/CrawlScript/WebCollector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CrawlScript/WebCollector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhuoran/crawler4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zhuoran/crawler4j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  开源爬虫框架nutch&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/xuekyo/archive/2013/04/18/3028559.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/xuekyo/archive/2013/04/18/3028559.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ahei.info/nutch-tutorial.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ahei.info/nutch-tutorial.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lc87624.iteye.com/blog/1625677&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lc87624.iteye.com/blog/1625677&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  由于要学习python语言，就关注了python爬虫的方法，scrapy框架是个成熟的开源爬虫框架，因此选择其作为学习内容。&lt;br&gt;Scrapy是一个基于Twisted，纯Python实现的爬虫框架，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容、图片、视频等，非常方便。&lt;/p&gt;
&lt;h1 id=&quot;二、scrapy框架&quot;&gt;&lt;a href=&quot;#二、scrapy框架&quot; class=&quot;headerlink&quot; title=&quot;二、scrapy框架&quot;&gt;&lt;/a&gt;二、scrapy框架&lt;/h1&gt;&lt;h2 id=&quot;1、整体架构如下：&quot;&gt;&lt;a href=&quot;#1、整体架构如下：&quot; class=&quot;headerlink&quot; title=&quot;1、整体架构如下：&quot;&gt;&lt;/a&gt;1、整体架构如下：&lt;/h2&gt;&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150121152425667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt; 绿线是数据流向，首先从初始URL 开始，Scheduler 会将其交给 Downloader 进行下载，下载之后会交给 Spider 进行分析，Spider分析出来的结果有两种：一种是需要进一步抓取的链接，&lt;/p&gt;
&lt;p&gt;例如之前分析的“下一页”的链接，这些东西会被传回 Scheduler ；另一种是需要保存的数据，它们则被送到Item Pipeline 那里，那是对数据进行后期处理（详细分析、过滤、存储等）的&lt;/p&gt;
&lt;p&gt;地方。另外，在数据流动的通道里还可以安装各种中间件，进行必要的处理。参考&lt;a href=&quot;http://blog.csdn.net/HanTangSongMing/article/details/24454453&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;    博客
   &lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2、工程文件介绍&quot;&gt;&lt;a href=&quot;#2、工程文件介绍&quot; class=&quot;headerlink&quot; title=&quot;2、工程文件介绍&quot;&gt;&lt;/a&gt;2、工程文件介绍&lt;/h2&gt;&lt;p&gt;假设你已经配置好环境了，进入某个文件夹pythonproject，在命令行中输入&lt;br&gt;scrapy startproject mypro&lt;br&gt;即可在pythonporoject文件夹下找到mypro的工程文件夹，结构如下：&lt;/p&gt;
&lt;p&gt;├── mypro&lt;br&gt;│   ├── mypro&lt;br&gt;│   │   ├── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br&gt;│   │   ├── items.py&lt;br&gt;│   │   ├── pipelines.py&lt;br&gt;│   │   ├── settings.py&lt;br&gt;│   │   └── spiders&lt;br&gt;│   │      └── &lt;strong&gt;init&lt;/strong&gt;.py&lt;br&gt;│   └── scrapy.cfg&lt;/p&gt;
&lt;p&gt;scrapy.cfg: 项目配置文件&lt;br&gt;items.py: 需要提取的数据结构定义文件&lt;br&gt;pipelines.py:管道定义，用来对items里面提取的数据做进一步处理，如保存等&lt;br&gt;settings.py: 爬虫配置文件&lt;/p&gt;
&lt;p&gt;Items是将要装载抓取的数据的容器，它工作方式像python里面的字典，但它提供更多的保护，比如对未定义的字段填充以防止拼写错误。它通过创建一个scrapy.item.Item类来声明&lt;br&gt;，定义它的属性为scrpiy.item.Field对象，就像是一个对象关系映射(ORM)，我们通过将需要的item模型化，来控制从dmoz.org获得的站点数据。虽然这次的实现并没有用到items.py和&lt;/p&gt;
&lt;p&gt;pipelines.py，但大规模的爬虫还是需要注意一下解耦。&lt;br&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scrapy.item &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Item, Field&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DmozItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Item)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    title = Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    link = Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    desc = Field()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在修改初始化代码时，首先需要在pythonproject//mypro//mypro//spiders下新建一个python文件，原则上所有的实现可以在这个文件里完成，当然耦合度就高了。在这个文件中，你需要新&lt;/p&gt;
&lt;p&gt;建一个类，这个类需要添加以下属性：&lt;br&gt;1、该类继承于某个spider类，根据自己的需求，有很多可以选，如crawSpider，BaseSpider，Spider，XMLFeedSpider，CSVFeedSpider，SitemapSpider等等&lt;br&gt;2、name：爬虫的识别名，它必须是唯一的，在不同的爬虫中你必须定义不同的名字，例如下文的”yourname”&lt;br&gt;3、start_urls：爬虫开始爬的一个URL列表。爬虫从这里开始抓取数据，所以，第一次下载的数据将会从这些URLS开始。其他子URL将会从这些起始URL中继承性生成。&lt;br&gt;4、parse()：爬虫的方法，调用时候传入从每一个URL传回的Response对象作为参数，response将会是parse方法的唯一的一个参数，这个方法负责解析返回的数据、匹配抓取的数据(解析为&lt;/p&gt;
&lt;p&gt;item)并跟踪更多的URL。返回前可以巧妙地运用yield方法递归调用网址，此关键词的作用是返回某个对象后继续执行。如果不用该关键字，则直接会在函数中返回。&lt;/p&gt;
&lt;p&gt;一般而言，运用scrapy的步骤是这样的：&lt;br&gt;1、在pythonproject//mypro//mypro//spiders下新建一个python文件&lt;br&gt;2、导入该导入的库文件，新建一个类满足以上要求。&lt;br&gt;3、根据继承的类的要求和功能，定义爬取规则。&lt;br&gt;4、在def parse(self, response)函数中对response对象解析，将需要的内容存入item对象并返回，在这里对数据不返回而是进行进一步处理也是可以的，耦合度高。&lt;br&gt;5、PipeLine用来对Spider返回的Item列表进行保存操作，可以写入到文件、或者数据库等。PipeLine只有一个需要实现的方法：process_item。&lt;br&gt;万事具备之后，通过命令行进入pythonproject//mypro文件夹中，敲下命令行开始爬虫&lt;br&gt;scrapy crawl “yourname”&lt;br&gt;scrapy命令罗列几个，要更多请参看&lt;a href=&quot;http://scrapy-chs.readthedocs.org/zh_CN/0.24/topics/commands.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;doc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrapy startproject xxx&lt;/code&gt; 新建一个xxx的project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrapy crawl xxx&lt;/code&gt; 开始爬取，必须在project中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrapy shell url&lt;/code&gt; 在scrapy的shell中打开url，非常实用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrapy runspider &amp;lt;spider_file.py&amp;gt;&lt;/code&gt; 可以在没有project的情况下运行爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;三、新浪新闻爬虫&quot;&gt;&lt;a href=&quot;#三、新浪新闻爬虫&quot; class=&quot;headerlink&quot; title=&quot;三、新浪新闻爬虫&quot;&gt;&lt;/a&gt;三、新浪新闻爬虫&lt;/h1&gt;&lt;p&gt;众所周知，评论一般是隐藏起来的，或者显示部分，需要手动点击加载去获取更多评论。有两种方法可以解决这种方法，一种是利用js动态解析，工作量大，也比较难实现，二是直接定位到其查询数据库的url，直接抽取。下文就是讲第二种方法。&lt;br&gt;新浪页面导航为我们简单分好类了&lt;a href=&quot;http://news.sina.com.cn/guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://news.sina.com.cn/guide/&lt;/a&gt;，而且每个类别中都可以找到相应的滚动新闻（url冠以roll），因而没必要用到crawSpider这个类，这个类功能很强大，不仅可以自动去重，还可以定义更多的爬取规则。例如这个链接&lt;a href=&quot;http://roll.finance.sina.com.cn/finance/zq1/index_1.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://roll.finance.sina.com.cn/finance/zq1/index_1.shtml&lt;/a&gt;，通过修改数字可以实现不断爬取对于新闻的url，当然没有这么“好”的url也是可以找到新闻的url。例如：&lt;a href=&quot;http://sports.sina.com.cn/nba/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sports.sina.com.cn/nba/&lt;/a&gt;&lt;br&gt;可以调用的浏览器的开发工具查找对应的js代码，查看数据库的url，之后在查看评论的时候也是这样的方法（点击刷新即可）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150121163439093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150121163529857?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt; 访问这个&lt;a href=&quot;http://feed.mix.sina.com.cn/api/roll/tags?channelid=6&amp;amp;sq=x_where:digit_cl==399872&amp;amp;begin=1401552000&amp;amp;tags=%E6%B9%96%E4%BA%BA%2C%E9%AA%91%E5%A3%AB%2C%E7%81%AB%E7%AE%AD%2C%E8%A9%B9%E5%A7%86%E6%96%AF%2C%E7%A7%91%E6%AF%94&amp;amp;num=30&amp;amp;lid=-3000&amp;amp;versionNumber=1.2.4&amp;amp;page=4&amp;amp;encode=utf-8&amp;amp;callback=feedCardJsonpCallback&amp;amp;_=1421828921159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;可以查看url&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150121163516500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;   因此，访问这个&lt;a href=&quot;http://roll.finance.sina.com.cn/finance/zq1/index_1.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;的内容，爬取新闻url,访问新闻并爬取标题、内容、评论。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#! /usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scrapy.selector &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Selector&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scrapy.http &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Request&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re,os&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scrapy.spider &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Spider&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib2,thread&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#处理编码问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;reload(sys)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sys.setdefaultencoding(&lt;span class=&quot;string&quot;&gt;&#39;gb18030&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#flag的作用是保证第一次爬取的时候不进行单个新闻页面内容的爬取&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;flag=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;projectpath=&lt;span class=&quot;string&quot;&gt;&#39;F:\\Python27\\pythonproject\\fuck\\&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*response)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sel = Selector(response[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#get title&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title = sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//h1/text()&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#get pages&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pages=sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//div[@id=&quot;artibody&quot;]//p/text()&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#get chanel_id &amp;amp; comment_id&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        s=sel.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//meta[@name=&quot;comment&quot;]&#39;&lt;/span&gt;).extract()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#comment_id = channel[index+3:index+15]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        index2=len(response[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].url)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        news_id=response[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].url[index2&lt;span class=&quot;number&quot;&gt;-14&lt;/span&gt;:index2&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        comment_id=&lt;span class=&quot;string&quot;&gt;&#39;31-1-&#39;&lt;/span&gt;+news_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#评论内容都在这个list中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmntlist=[]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        page=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#含有新闻url,标题,内容,评论的文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        file2=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#该变量的作用是当某新闻下存在非手机用户评论时置为False&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        is_all_tel=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((page==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; (cmntlist != [])):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tel_count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#each page tel_user_count&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#提取到的评论url&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url=&lt;span class=&quot;string&quot;&gt;&quot;http://comment5.news.sina.com.cn/page/info?version=1&amp;amp;format=js&amp;amp;channel=cj&amp;amp;newsid=&quot;&lt;/span&gt;+str(comment_id)+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;group=0&amp;amp;compress=1&amp;amp;ie=gbk&amp;amp;oe=gbk&amp;amp;page=&quot;&lt;/span&gt;+str&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(page)+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;page_size=100&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url_contain=urllib2.urlopen(url).read()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            b=&lt;span class=&quot;string&quot;&gt;&#39;=&amp;#123;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            after = url_contain[url_contain.index(b)+len(b)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;:]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#字符串中的None对应python中的null，不然执行eval时会出错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            after=after.replace(&lt;span class=&quot;string&quot;&gt;&#39;null&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;None&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#转换为字典变量text&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            text=eval(after)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;cmntlist&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; text[&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;]:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                cmntlist=text[&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;cmntlist&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                cmntlist=[]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cmntlist != [] &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (page==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                filename=str(comment_id)+&lt;span class=&quot;string&quot;&gt;&#39;.txt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                path=projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock\\&#39;&lt;/span&gt; +filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file2=open(path,&lt;span class=&quot;string&quot;&gt;&#39;a+&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                news_content=str(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pages:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    news_content=news_content+p+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                item=&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;url&amp;gt;&quot;&lt;/span&gt;+response[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].url+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/url&amp;gt;&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;\n\n&#39;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;title&amp;gt;&quot;&lt;/span&gt;+str(title[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/title&amp;gt;\n\n&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;content&amp;gt;\n&quot;&lt;/span&gt;+str(news_content)+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/content&amp;gt;\n\n&amp;lt;comment&amp;gt;\n&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file2.write(item)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cmntlist != []:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                content=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; status_dic &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; cmntlist:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; status_dic[&lt;span class=&quot;string&quot;&gt;&#39;uid&#39;&lt;/span&gt;]!=&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        is_all_tel=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;#这一句视编码情况而定，在这里去掉decode和encode也行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        s=status_dic[&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;].decode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;).encode(&lt;span class=&quot;string&quot;&gt;&#39;GBK&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;#见另一篇博客“三张图”&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        s=s.replace(&lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        s=s.replace(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        s1=&lt;span class=&quot;string&quot;&gt;&quot;u&#39;&quot;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            ss=eval(s1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                s1=&lt;span class=&quot;string&quot;&gt;&#39;u&quot;&#39;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                ss=eval(s1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        content=content+status_dic[&lt;span class=&quot;string&quot;&gt;&#39;time&#39;&lt;/span&gt;]+&lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;+status_dic[&lt;span class=&quot;string&quot;&gt;&#39;uid&#39;&lt;/span&gt;]+&lt;span class=&quot;string&quot;&gt;&#39;\t&#39;&lt;/span&gt;+ss+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;#当属于手机用户时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        tel_count=tel_count+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#当一个page下不都是手机用户时，这里也可以用is_all_tel进行判断，一种是用开关的方式，一种是统计的方式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#算了不改了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; tel_count!=len(cmntlist):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    file2.write(content)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            page=page+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#while loop end here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; file2!=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#当都是手机用户时，移除文件，否则写入&quot;&amp;lt;/comment&amp;gt;&quot;到文件尾&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_all_tel:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file2.close()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    os.remove(file2.name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; WindowsError:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file2.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/comment&amp;gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file2.close()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DmozSpider&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Spider)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&quot;stock&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    allowed_domains = [&lt;span class=&quot;string&quot;&gt;&quot;sina.com.cn&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#在本程序中，start_urls并不重要，因为并没有解析&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    start_urls = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;http://news.sina.com.cn/&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; projectpath&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.exists(projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock&#39;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        os.mkdir(projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, response)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#这个scrapy.selector.Selector是个不错的处理字符串的类，python对编码很严格，它却处理得很好&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#在做这个爬虫的时候，碰到很多奇奇怪怪的编码问题，主要是中文，试过很多既有的类，BeautifulSoup处理得也不是很好&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sel = Selector(response)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; flag&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            flag=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            page=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; page&amp;lt;&lt;span class=&quot;number&quot;&gt;260&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                url=&lt;span class=&quot;string&quot;&gt;&quot;http://roll.finance.sina.com.cn/finance/zq1/index_&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                url=url+str(page)+&lt;span class=&quot;string&quot;&gt;&quot;.shtml&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#伪装为浏览器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                user_agent = &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                headers = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt; : user_agent &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                req = urllib2.Request(url, headers=headers)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                response = urllib2.urlopen(req)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                url_contain = response.read()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#利用BeautifulSoup进行文档解析&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                soup = BeautifulSoup(url_contain)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                params = soup.findAll(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;listBlk&#39;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.exists(projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock\\&#39;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;link&#39;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     os.mkdir(projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock\\&#39;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;link&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                filename=&lt;span class=&quot;string&quot;&gt;&#39;link.txt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                path=projectpath+&lt;span class=&quot;string&quot;&gt;&#39;stock\\link\\&#39;&lt;/span&gt; + filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                filelink=open(path,&lt;span class=&quot;string&quot;&gt;&#39;a+&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; params_item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; params:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    persons = params_item.findAll(&lt;span class=&quot;string&quot;&gt;&#39;li&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; persons:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        href=item.find(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        mil_link= href.get(&lt;span class=&quot;string&quot;&gt;&#39;href&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        filelink.write(str(mil_link)+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;#递归调用parse,传入新的爬取url&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; Request(mil_link, callback=self.parse)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                page=page+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#对单个新闻页面新建线程进行爬取&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; flag!=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.status != &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (response.status != &lt;span class=&quot;number&quot;&gt;502&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                thread.start_new_thread(loop,(response,))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 爬取结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150121171359378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;image_mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;在爬取的过程中要注意三点：&lt;br&gt;1.爬取不要过于频繁，不然可能会被封ip，可以减小爬取的速度，sleep一下，或者更改设置文件，我的在F:\Python27\python\Lib\site-packages\Scrapy-0.24.4-py2.7.egg\scrapy\settings\default_settings.py&lt;br&gt;2.文件夹的文件上限为21845，超过后注意再新建一个文件夹爬取&lt;br&gt;3.线程不能开得太多，不然也可能达到上限，可以考虑用代码现在所开线程的多少或者利用分布式系统&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、综述&quot;&gt;&lt;a href=&quot;#一、综述&quot; class=&quot;headerlink&quot; title=&quot;一、综述&quot;&gt;&lt;/a&gt;一、综述&lt;/h1&gt;&lt;p&gt;  开始这篇博文之前，调研了相关的爬虫方法，简单罗列冰山一角。&lt;/p&gt;
&lt;p&gt;  综述：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.crifan.com/summary_about_flow_process_of_fetch_webpage_simulate_login_website_and_some_notice/&quot;&gt;http://www.crifan.com/summary_about_flow_process_of_fetch_webpage_simulate_login_website_and_some_notice/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://enjoyhot.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://enjoyhot.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="http://enjoyhot.github.io/tags/Spider/"/>
    
      <category term="Scrapy" scheme="http://enjoyhot.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>【machine learning】regularization        </title>
    <link href="http://enjoyhot.github.io/2015/01/21/machinelearning-linear-regularization/"/>
    <id>http://enjoyhot.github.io/2015/01/21/machinelearning-linear-regularization/</id>
    <published>2015-01-21T06:57:00.000Z</published>
    <updated>2017-04-02T09:32:28.808Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、机器学习范式&quot;&gt;&lt;a href=&quot;#一、机器学习范式&quot; class=&quot;headerlink&quot; title=&quot;一、机器学习范式&quot;&gt;&lt;/a&gt;一、机器学习范式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、按数据类型划分(带标签与否)&lt;/strong&gt;&lt;br&gt;  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121143726836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  这是从样本的数据进行划分，现实中大部分属于半监督学习，并且大部分数据是没分类好的。&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;监督学习：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121143802217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分类&lt;br&gt;       e.g. 文本分类  垃圾邮件过滤  搜索结果&lt;br&gt;回归分析&lt;br&gt;      e.g. 房价预测  股价预测&lt;br&gt;序列标注&lt;br&gt;      e.g. 词性标注&lt;br&gt;  输入:“我中了一张彩票”&lt;br&gt;  输出:“我/r  中/v 了/y /一/m /张/q /彩票/n&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无监督学习：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121143801625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;br&gt;聚类&lt;br&gt;      e.g. 热点话题发现  社团发现&lt;br&gt;密度函数估计(probability density estimation )&lt;br&gt;      e.g. pdf估计&lt;br&gt;异常点检测(outlier detection)&lt;br&gt;      e.g. one-class  SVM, 去噪&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半监督学习：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121143839828?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  核心思想&lt;br&gt;考虑如何利用少量的标注样本和大量的未标注样本进行训练和分类的问题&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;分类&lt;br&gt;      e.g. 垃圾邮件过滤，半监督SVM&lt;br&gt;回归分析&lt;br&gt;聚类&lt;br&gt;e.g. GMM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、按学习过程划分&lt;/strong&gt;&lt;br&gt;主动学习、转导学习、强化学习&lt;/p&gt;
&lt;p&gt;主动学习(Active Learning)&lt;br&gt;    有少量标注的数据以及丰富的未标注数据 ，标注数据的成本很高，学习算法主动提出一些标注请求，将筛选过的数据交给专家进行标注，然后将标注的数据加入到训练集中，再进行训练。&lt;/p&gt;
&lt;p&gt;核心问题：怎么样筛选数据才能使得请求标注的次数尽量少而最终的结果又尽量好&lt;/p&gt;
&lt;p&gt;与半监督学习的区别：半监督学习算法不需要人工干预，基于自身对未标记数据加以利用，微博的用户推荐用户就是充当专家的角色。&lt;br&gt;问题可形式化为：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121143940875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;转导学习(Transductive Learning)&lt;br&gt;一种通过观察特定的训练样本，进而预测特定的测试样本的方法在不同的测试集上会产生相互不一致的预测&lt;/p&gt;
&lt;p&gt;特点：&lt;br&gt;    1.建立一个更适用于问题域的模型，而非一个更通用的模型&lt;br&gt;    2.利用无标注的测试样本的信息发现聚簇，进而更有效地分类&lt;br&gt;    3.模型近似&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144045362?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;与半监督学习的区别：半监督学习不知道测试案例是什么，转导学习知道测试案                                                                                                                                                      例是什么&lt;br&gt; 半监督学习本质上是从特殊到一般(train)，一般到特殊(predict)的推理方法&lt;br&gt; 转导学习本质上是直接从特殊到特殊的推理方法，自动修正模型。&lt;br&gt;强化学习(Reinforcement Learning)&lt;br&gt;从环境状态到行为映射的学习，以使系统行为从环境中获得的累积奖赏值最大。该方法不同与监督学习技术那样通过正例、反例来告知采取何种行为，而是通过试错（trial-and-error）的方法来发现最优行为策略&lt;br&gt;   ）的方法来发现最优行为策略&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144116109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;适用情况：适用于序列决策或者控制问题，很难有这么规则的样本。&lt;/p&gt;
&lt;p&gt;e.g. 象棋AI程序&lt;br&gt;解决思路:我们设计一个回报函数（reward function），如果learning agent（象棋AI程序）在决定一步后，获得了较好的结果，那么我们给agent一些回报（比如回报函数结果为正），得到较差的结果，那么回报函数为负。如果我们能够对每一步进行评价，得到相应的回报函数，那么就好办了，我们只需要找到一条回报值最大的路径（每步的回报之和最大），就认为是最佳的路径。&lt;br&gt;备注:一个强化学习的比赛 &lt;a href=&quot;http://ijcai-15.org/index.php/angry-birds-competition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ijcai-15.org/index.php/angry-birds-competition&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;二、正则化&quot;&gt;&lt;a href=&quot;#二、正则化&quot; class=&quot;headerlink&quot; title=&quot;二、正则化&quot;&gt;&lt;/a&gt;二、正则化&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、模型选择：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a.若采用多项式拟合&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150121144234655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;欠拟合(underfit,also high bias)&lt;br&gt;特征集过小，模型过于简单，会导致训练集的误差明显增大的现象。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144311534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 过拟合(overfit,also high variance)&lt;br&gt;非常多的特征，那么所学的Hypothesis有可能对训练集拟合的非常好,但是对测试集效果很差，即训练误差少，测试集误差大。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144334591?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; b.避免过拟合的方法——约束高阶多项式的系数&lt;/p&gt;
&lt;p&gt;以下是不同阶数的多项式相对应的系数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144359426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  定义损失函数：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144414859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 绿色曲线为最佳拟合，红色曲线为实际拟合结果。&lt;br&gt;罚项系数选择&lt;br&gt;   1.交叉验证&lt;br&gt;   2.超参数学习，解决最优化问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、模型选择策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a.代价函数(Cost function)&lt;br&gt;b.风险函数或期望风险(risk function)&lt;br&gt;①　定义为损失函数的期望&lt;br&gt;②　理论上模型f(x)关于联合分布P(X, Y)的平均意义下的损失&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121144452140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;①　学习的本质目标是选择期望风险最小的模型，由于联合分布P(X,Y)是未知的，风险函数Rexp(f)不能直接计算。&lt;br&gt;c.经验风险(empirical risk minimizatiion, ERM)&lt;br&gt;①模型f(x)关于训练数据集的平均损失称为经验风险，对期望风险的近似&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150121144526234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 其实，最大似然估计等价于最小化经验风险。&lt;br&gt;②经验风险最小化(ERM)的策略认为，经验风险最小的模型是最优模型&lt;br&gt;③当样本容量是够大时，经验风险最小化能保证有很好的学习效果，在现实中被广泛应用&lt;br&gt;④当样本容量很小时，经验风险最小化学习的效果就未必很好，会产生“过拟合（over-fitting）”现象，如多项式阶数很大，出现过拟合。&lt;/p&gt;
&lt;p&gt;d.结构风险(structural risk minimization, SRM)&lt;br&gt;①在经验风险上加上表示模型复杂度的正则化项或罚项&lt;br&gt;②防止过拟合&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121144554125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 其中J(f)为模型的复杂度，是定义在假设空间 F 上的泛函数。&lt;br&gt;模型 f 越复杂，复杂度J(f)就越大；反之，模型 f 越简单，复杂度J(f)就越小&lt;/p&gt;
&lt;p&gt;③&lt;img src=&quot;http://img.blog.csdn.net/20150121144655020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;决定了用以权衡经验风险和模型复杂度&lt;br&gt;④结构风险小需要经验风险与模型复杂度同时小，结构风险小的模型往往对训练数据以及未知的测试数据都有较好的预测，正则化的本质是控制模型的复杂度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、贝叶斯公式&lt;/strong&gt;&lt;br&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144633453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 贝叶斯公式反映人们推理的方式,即人做实验时，先需要作出一定的假设(利用先验知识)，在假设的指导上去做实验，得到观察数据，最后利用实验数据修正对假设的理解，也就得到后验分布。&lt;br&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144737468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最小二乘问题的最大后验估计(MAP)&lt;br&gt;令&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121144753578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最大后验估计等价于最小化正则化的平方损失函数，最大后验估计等价于最小化结构风险。&lt;br&gt;代价函数可改成：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150121144901505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;回顾下不加正则化的正规方程&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150121144854859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;加正则化的正规方程，相当于对矩阵&lt;img src=&quot;http://img.blog.csdn.net/20150121144921640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;所有特征值同时加了&lt;img src=&quot;http://img.blog.csdn.net/20150121144934031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;，新矩阵&lt;img src=&quot;http://img.blog.csdn.net/20150121144954578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;基本上是可逆的(除非原矩阵存在负&lt;img src=&quot;http://img.blog.csdn.net/20150121145005625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VndWd1amlhd2Vp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;的特征)，即新的特征方程有唯一解。因而利用贝叶斯的正则化是分类算法中常用的方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、机器学习范式&quot;&gt;&lt;a href=&quot;#一、机器学习范式&quot; class=&quot;headerlink&quot; title=&quot;一、机器学习范式&quot;&gt;&lt;/a&gt;一、机器学习范式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、按数据类型划分(带标签与否)&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>我唱自己的歌</title>
    <link href="http://enjoyhot.github.io/2015/01/20/songsong/"/>
    <id>http://enjoyhot.github.io/2015/01/20/songsong/</id>
    <published>2015-01-20T13:30:26.000Z</published>
    <updated>2017-04-02T09:32:28.960Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://enjoyhot.github.io/img/arcticle_pic/201501/012001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我唱自己的歌&lt;br&gt;在布满车前草的道路上&lt;br&gt;在灌木的集市上&lt;br&gt;在雪松和白桦树的舞会上&lt;br&gt;在那山野的原始欢乐上&lt;br&gt;我唱自己的歌&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我唱自己的歌&lt;br&gt;在热电厂恐怖的烟云中&lt;br&gt;在变速箱复杂的组织中&lt;br&gt;在砂轮的亲吻中&lt;br&gt;在那社会文明的运行中&lt;br&gt;我唱自己的歌&lt;/p&gt;
&lt;p&gt;我唱自己的歌&lt;br&gt;即不陌生又不熟练&lt;br&gt;我是练习曲的孩子&lt;br&gt;愿意加入所有歌队&lt;br&gt;为了不让规范的人们知道&lt;br&gt;我唱自己的歌&lt;/p&gt;
&lt;p&gt;我唱歌，唱自己的歌&lt;br&gt;直到世界恢复了史前的寂寞&lt;br&gt;细长的月亮&lt;br&gt;从海边向我走来&lt;br&gt;轻轻地问：为什么？&lt;br&gt;你唱自己的歌&lt;/p&gt;
&lt;p&gt;——顾城&lt;/p&gt;
&lt;p&gt;在满是荆棘的历程中，我可能被泡沫掩埋，请让我还来得及向世界挑战。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;插入图的两种方法：&lt;/p&gt;
&lt;p&gt;内链（空间）：&lt;br&gt;&lt;img src=&quot;https://enjoyhot.github.io/img/arcticle_pic/201501/012001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zmingcx.com/free-fig-bed.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;外链（图床）&lt;/a&gt;：&lt;br&gt;&lt;img src=&quot;https://geekpics.net/images/2015/03/26/PEaRh7tB.jpg&quot; alt=&quot;PEaRh7tB.jpg&quot; border=&quot;0&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://enjoyhot.github.io/img/arcticle_pic/201501/012001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我唱自己的歌&lt;br&gt;在布满车前草的道路上&lt;br&gt;在灌木的集市上&lt;br&gt;在雪松和白桦树的舞会上&lt;br&gt;在那山野的原始欢乐上&lt;br&gt;我唱自己的歌&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="http://enjoyhot.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://enjoyhot.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>【machine learning】linear regression        </title>
    <link href="http://enjoyhot.github.io/2015/01/18/machinelearning-linear-regression/"/>
    <id>http://enjoyhot.github.io/2015/01/18/machinelearning-linear-regression/</id>
    <published>2015-01-18T11:43:00.000Z</published>
    <updated>2017-04-02T09:32:28.808Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一、曲线拟合&quot;&gt;&lt;a href=&quot;#一、曲线拟合&quot; class=&quot;headerlink&quot; title=&quot;一、曲线拟合&quot;&gt;&lt;/a&gt;一、曲线拟合&lt;/h1&gt;&lt;p&gt;  &lt;strong&gt;1、问题引入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  ①假设现在有一份关于某城市的住房面积与相应房价的数据集&lt;br&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118194525562&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  表1 居住面积与房价关系&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118194601201&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  图1 居住面积与房价关系&lt;/p&gt;
&lt;p&gt;  那么给定这样一个数据集，我们怎么学习出一个以住房面积大小为自变量的用于预测该城市房价的函数？&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118194651511&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  问题可形式化为给定大小为m的训练样本集&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118194745140&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;   我们希望学习的目标函数为&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118194827576&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  房价预测本质上是回归问题&lt;/p&gt;
&lt;p&gt;  a、回归分析挖掘自变量与因变量之间的关系&lt;/p&gt;
&lt;p&gt;  b、有监督的学习问题，所有的样本点都带有目标变量&lt;/p&gt;
&lt;p&gt;  c、输出变量为连续值，可取任意实数&lt;/p&gt;
&lt;p&gt;  ②假设现在我们有份更详尽的数据集，它还记录了卧室的数量&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118194839588&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  输入&lt;img src=&quot;http://img.blog.csdn.net/20150118195022813&quot; alt=&quot;&quot;&gt;，X=(x1,x2)&lt;/p&gt;
&lt;p&gt;  假设每个自变量都与因变量Y存在线性相关&lt;br&gt;  目标是学习出假设函数&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195053077&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195116602&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;2、怎样建模&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  ①基本概念&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195123031&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Relationship&lt;br&gt;l Linear correlated?&lt;br&gt;l Nonlinear correlated?&lt;br&gt;Mining relation&lt;br&gt;l Correlation coefficient&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195224166&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195321512&quot; alt=&quot;&quot;&gt;= 1时，称X,Y完全相关，X,Y之间具有线性函数关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Special Case&lt;br&gt;e.g. 猜想Y与X存在指数关系，观察&lt;br&gt;lnY与X的线性相关性&lt;/li&gt;
&lt;li&gt;General—Polynomial Curve Fit（多项式曲线拟合）&lt;br&gt;找到合适的阶数k，使等式成立，譬如logistic regression。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195420995&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  ②多元变量线性回归&lt;/p&gt;
&lt;p&gt;  上文提到假设函数：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195116602&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;参数或权重(反映每个自变量对输出的影响)，使线性函数空间参数化(h形式已知,用参数来刻画)为了表示方便，令x0(对应截距项)，则上式可写成&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195420995&quot; alt=&quot;&quot;&gt;&lt;br&gt;注：k与自变量的个数有关，此处k=2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、怎样获取参数&lt;/strong&gt;&lt;br&gt;合理的选择策略:对于该数据集的每一个样本，选定的参数使得尽可能接近y。在实际中，尽可能接近用代价函数来表示。&lt;br&gt;Cost Function(代价函数)&lt;br&gt;描述预测值与真实值之间的差距，从而优化目标函数参数，可以利用0-1损失，绝对值损失，平方损失，对数损失。对于线性回归问题，我们采用的目标函数为&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195547029&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 这是普通最小二乘回归模型(statistics)，可以利用概率论知识解释为什么可以，如下。&lt;/p&gt;
&lt;h1 id=&quot;二、概率解释&quot;&gt;&lt;a href=&quot;#二、概率解释&quot; class=&quot;headerlink&quot; title=&quot;二、概率解释&quot;&gt;&lt;/a&gt;二、概率解释&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、选择最小二乘(平方损失)代价函数的理由：&lt;/strong&gt;&lt;br&gt;我们做出如下假设：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195648742&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; E(i)：误差项(没有model出的效应，e.g.遗漏了某些因素的影响)或随机噪声&lt;br&gt;进一步假设：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195703812&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  即&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195737118&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  注意，下面式子与这条式子等价。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195805775&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118195832562&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  等价于&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118195905040&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  之后我们就可以利用似然函数解释最小二乘代价函数：&lt;/p&gt;
&lt;p&gt;定义:给定随机变量X与参数，我们观察到结果Y的可能性&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118200007034&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  由E(i)之间的独立性假设，得&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200012234&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 简单解释一下，我们的目标，是实现在给定的情况下，对于m个样本的输入，能输出的m个y的概率的总乘积最大，那构建的模型就越准确了，即最大似然估计。&lt;/p&gt;
&lt;p&gt;定义：最大似然估计(maximum likelihood estimation)&lt;br&gt;    当给定似然函数(关联y与x的概率模型)时，一种合理的参数估计方法是尽可 能选择使数据出现的概率最大，即最大化似然函数。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200106250&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200139308&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  实际上，常用的是对数似然：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200226280&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  因而，最大似然估计等价于最小化平方损失函数，得证。&lt;/p&gt;
&lt;h1 id=&quot;三、模型求解&quot;&gt;&lt;a href=&quot;#三、模型求解&quot; class=&quot;headerlink&quot; title=&quot;三、模型求解&quot;&gt;&lt;/a&gt;三、模型求解&lt;/h1&gt;&lt;p&gt;  &lt;strong&gt;1、梯度下降法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   (steepest??gradient??descent)&lt;/p&gt;
&lt;p&gt;  负梯度方向是函数值下降的方向，利用负梯度方向来决定每次迭代的新的搜索方向，使得每次迭代能使待优化的目标函数逐步减小。&lt;/p&gt;
&lt;p&gt; a：学习率&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200331254&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  其中（关键）：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118200351160&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  LMS&lt;/p&gt;
&lt;p&gt;   更新法则：&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118200456602&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  注意：每次参数更新只用到一个训练样本，样本维数等于维数。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;2、批量梯度下降(batch gradient descent)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118200519721&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  每次参数更新，需要依赖训练集的所有样本。&lt;/p&gt;
&lt;p&gt;  对于线性回归问题，代价函数是凸二次规划函数，有全局最优解&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118200553651&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  图1 梯度下降法迭代过程&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;3、随机梯度下降&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118200642750&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 特点:&lt;br&gt;1.每次随机选取一个样本点 立即更新参数&lt;br&gt;2.单个样本点的代价函数值下降近似于总体的代价函数值下降&lt;br&gt;3.对步长选择敏感 可能会出现overshoot the minimum&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118200743694&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;3、方法比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  1．梯度下降法是批量更新算法，随机梯度是在线算法&lt;/p&gt;
&lt;p&gt;  2．梯度法优化的是经验风险，随机梯度法优化的是泛化风险&lt;/p&gt;
&lt;p&gt;  3．梯度法可能陷入局部最优，随机梯度可能找到全局最优&lt;/p&gt;
&lt;p&gt;  4．梯度法对步长不敏感，随机梯度对步长选择敏感&lt;/p&gt;
&lt;p&gt;  5．梯度法对初始点(参数)选择敏感&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;http://img.blog.csdn.net/20150118200745625&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;4、输入预处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  a.归一化&lt;/p&gt;
&lt;p&gt;  输入特征归一化，确保特征在相似的尺度里，但不一定所有的数据都需要归一化。&lt;/p&gt;
&lt;p&gt;  理由：梯度下降法可能会存执之字形地下降，影响算法的收敛速度。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200901959&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  一般做法：&lt;br&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200904250&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  其中均值，最大值与最小值之差或标准差。&lt;/p&gt;
&lt;p&gt;  b.步长的选择&lt;/p&gt;
&lt;p&gt;  对于梯度下降法：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118200954516&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  注意两个问题：&lt;/p&gt;
&lt;p&gt;  1、“调试”：如何确保梯度下降算法正确的执行；&lt;/p&gt;
&lt;p&gt; 2、如何选择正确的步长(learning rate):  α&lt;br&gt; 如何选择α-经验的方法：&lt;br&gt;…, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1…&lt;br&gt;     特别对于随机梯度下降法，步长的选择需满足两点：&lt;br&gt;①保证算法收敛性&lt;br&gt;②保证有机会搜索到全局最优解&lt;/p&gt;
&lt;p&gt;5、正规方程&lt;br&gt;假设函数作用于每个样本：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118201009929&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  则：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118201053796&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  代价函数可改成：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118201108382&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  此问题等价于：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150118201233464&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  即两个向量之间的欧氏距离：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118201251904&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  几何意义：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://img.blog.csdn.net/20150118201243390&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://img.blog.csdn.net/20150118201309328&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  需保证&lt;img src=&quot;http://img.blog.csdn.net/20150118201406113&quot; alt=&quot;&quot;&gt;可逆(可逆的充分条件:矩阵X各列线性无关)&lt;/p&gt;
&lt;p&gt;回顾一下，上面我们的方法是利用迭代的方式求出，从而使代价函数值最小，并没有求出代价函数。也就是说，所谓的最优解能否求得，不管是通过迭代的方式或是其它方式也好，符合上面的条件才行。&lt;/p&gt;
&lt;p&gt;但现实中的数据不是那么理想的。&lt;br&gt;若不可逆，如何求解？&lt;br&gt;1、求伪逆(statistics的解决方案)&lt;br&gt;2、去掉冗余的特征（线性相关）&lt;br&gt;3、去掉过多的特征，例如m &amp;lt;= n (m为样本数, n为特征数)&lt;/p&gt;
&lt;h1 id=&quot;四、小结&quot;&gt;&lt;a href=&quot;#四、小结&quot; class=&quot;headerlink&quot; title=&quot;四、小结&quot;&gt;&lt;/a&gt;四、小结&lt;/h1&gt;&lt;p&gt;1、梯度下降法&lt;br&gt;需要选择合适的learning rate α;&lt;br&gt;需要很多轮迭代&lt;br&gt;即使n很大的时候效果也很好（n为特征数，即维度）&lt;br&gt;2、正规方程&lt;br&gt;不需要选择α&lt;br&gt;不需要迭代，一次搞定&lt;/p&gt;
&lt;p&gt;  需要计算&lt;img src=&quot;http://img.blog.csdn.net/20150118201406113&quot; alt=&quot;&quot;&gt;，其时间复杂度是&lt;img src=&quot;http://img.blog.csdn.net/20150118201436923&quot; alt=&quot;&quot;&gt;&lt;br&gt;  n很大，就非常慢，可以考虑降维&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、曲线拟合&quot;&gt;&lt;a href=&quot;#一、曲线拟合&quot; class=&quot;headerlink&quot; title=&quot;一、曲线拟合&quot;&gt;&lt;/a&gt;一、曲线拟合&lt;/h1&gt;&lt;p&gt;  &lt;strong&gt;1、问题引入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  ①假设现在有一份关于某城市的住房面积与相应房价的数据集&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://enjoyhot.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
</feed>
